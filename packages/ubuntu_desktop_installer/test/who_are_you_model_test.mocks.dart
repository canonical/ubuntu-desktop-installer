// Mocks generated by Mockito 5.0.16 from annotations
// in ubuntu_desktop_installer/test/who_are_you_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ubuntu_desktop_installer/services/hostname_service.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [HostnameService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHostnameService extends _i1.Mock implements _i2.HostnameService {
  MockHostnameService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get hostname =>
      (super.noSuchMethod(Invocation.getter(#hostname), returnValue: '')
          as String);
  @override
  _i3.Stream<String> get hostnameChanged =>
      (super.noSuchMethod(Invocation.getter(#hostnameChanged),
          returnValue: Stream<String>.empty()) as _i3.Stream<String>);
  @override
  String get staticHostname =>
      (super.noSuchMethod(Invocation.getter(#staticHostname), returnValue: '')
          as String);
  @override
  _i3.Stream<String> get staticHostnameChanged =>
      (super.noSuchMethod(Invocation.getter(#staticHostnameChanged),
          returnValue: Stream<String>.empty()) as _i3.Stream<String>);
  @override
  _i3.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> setHostname(String? hostname) =>
      (super.noSuchMethod(Invocation.method(#setHostname, [hostname]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}
