// Mocks generated by Mockito 5.0.16 from annotations
// in ubuntu_desktop_installer/test/keyboard_layout_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:subiquity_client/subiquity_client.dart' as _i6;
import 'package:ubuntu_desktop_installer/pages/keyboard_layout/keyboard_layout_model.dart'
    as _i2;
import 'package:ubuntu_desktop_installer/services.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [KeyboardLayoutModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyboardLayoutModel extends _i1.Mock
    implements _i2.KeyboardLayoutModel {
  MockKeyboardLayoutModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get layoutCount =>
      (super.noSuchMethod(Invocation.getter(#layoutCount), returnValue: 0)
          as int);
  @override
  int get selectedLayoutIndex => (super
          .noSuchMethod(Invocation.getter(#selectedLayoutIndex), returnValue: 0)
      as int);
  @override
  _i3.Stream<int> get onLayoutSelected =>
      (super.noSuchMethod(Invocation.getter(#onLayoutSelected),
          returnValue: Stream<int>.empty()) as _i3.Stream<int>);
  @override
  _i3.Stream<int> get onVariantSelected =>
      (super.noSuchMethod(Invocation.getter(#onVariantSelected),
          returnValue: Stream<int>.empty()) as _i3.Stream<int>);
  @override
  int get variantCount =>
      (super.noSuchMethod(Invocation.getter(#variantCount), returnValue: 0)
          as int);
  @override
  int get selectedVariantIndex =>
      (super.noSuchMethod(Invocation.getter(#selectedVariantIndex),
          returnValue: 0) as int);
  @override
  bool get isValid =>
      (super.noSuchMethod(Invocation.getter(#isValid), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  String layoutName(int? index) =>
      (super.noSuchMethod(Invocation.method(#layoutName, [index]),
          returnValue: '') as String);
  @override
  void selectLayout(int? index, [int? variant = 0]) =>
      super.noSuchMethod(Invocation.method(#selectLayout, [index, variant]),
          returnValueForMissingStub: null);
  @override
  void trySelectLayoutVariant(String? layout, String? variant) =>
      super.noSuchMethod(
          Invocation.method(#trySelectLayoutVariant, [layout, variant]),
          returnValueForMissingStub: null);
  @override
  String variantName(int? index) =>
      (super.noSuchMethod(Invocation.method(#variantName, [index]),
          returnValue: '') as String);
  @override
  void selectVariant(int? index) =>
      super.noSuchMethod(Invocation.method(#selectVariant, [index]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<String?> detectKeyboardLayout() =>
      (super.noSuchMethod(Invocation.method(#detectKeyboardLayout, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  _i3.Future<String?> detectLayoutVariant() =>
      (super.noSuchMethod(Invocation.method(#detectLayoutVariant, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  _i3.Future<void> applyKeyboardSettings() =>
      (super.noSuchMethod(Invocation.method(#applyKeyboardSettings, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  void addListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [KeyboardService].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyboardService extends _i1.Mock implements _i5.KeyboardService {
  MockKeyboardService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.KeyboardLayout> get layouts =>
      (super.noSuchMethod(Invocation.getter(#layouts),
          returnValue: <_i6.KeyboardLayout>[]) as List<_i6.KeyboardLayout>);
  @override
  set layouts(List<_i6.KeyboardLayout>? _layouts) =>
      super.noSuchMethod(Invocation.setter(#layouts, _layouts),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> load(_i6.SubiquityClient? client) =>
      (super.noSuchMethod(Invocation.method(#load, [client]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}
