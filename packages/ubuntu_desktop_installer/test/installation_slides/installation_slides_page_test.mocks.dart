// Mocks generated by Mockito 5.1.0 from annotations
// in ubuntu_desktop_installer/test/installation_slides/installation_slides_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:flutter/widgets.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:subiquity_client/subiquity_client.dart' as _i2;
import 'package:ubuntu_desktop_installer/pages/installation_slides/installation_slides_model.dart'
    as _i3;
import 'package:ubuntu_desktop_installer/services.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSubiquityClient_0 extends _i1.Fake implements _i2.SubiquityClient {}

/// A class which mocks [InstallationSlidesModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstallationSlidesModel extends _i1.Mock
    implements _i3.InstallationSlidesModel {
  MockInstallationSlidesModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SubiquityClient get client =>
      (super.noSuchMethod(Invocation.getter(#client),
          returnValue: _FakeSubiquityClient_0()) as _i2.SubiquityClient);
  @override
  bool get isDone =>
      (super.noSuchMethod(Invocation.getter(#isDone), returnValue: false)
          as bool);
  @override
  bool get hasError =>
      (super.noSuchMethod(Invocation.getter(#hasError), returnValue: false)
          as bool);
  @override
  bool get isPreparing =>
      (super.noSuchMethod(Invocation.getter(#isPreparing), returnValue: false)
          as bool);
  @override
  bool get isInstalling =>
      (super.noSuchMethod(Invocation.getter(#isInstalling), returnValue: false)
          as bool);
  @override
  int get installationStep =>
      (super.noSuchMethod(Invocation.getter(#installationStep), returnValue: 0)
          as int);
  @override
  int get installationStepCount =>
      (super.noSuchMethod(Invocation.getter(#installationStepCount),
          returnValue: 0) as int);
  @override
  _i4.Stream<String> get journal =>
      (super.noSuchMethod(Invocation.getter(#journal),
          returnValue: Stream<String>.empty()) as _i4.Stream<String>);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i4.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> precacheSlideImages(_i5.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#precacheSlideImages, [context]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> reboot({bool? immediate = true}) => (super.noSuchMethod(
      Invocation.method(#reboot, [], {#immediate: immediate}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i4.Future<void> shutdown({bool? immediate}) => (super.noSuchMethod(
      Invocation.method(#shutdown, [], {#immediate: immediate}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [JournalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockJournalService extends _i1.Mock implements _i7.JournalService {
  MockJournalService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<String> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
          returnValue: Stream<String>.empty()) as _i4.Stream<String>);
  @override
  _i4.Future<void> start() => (super.noSuchMethod(Invocation.method(#start, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void stop() => super.noSuchMethod(Invocation.method(#stop, []),
      returnValueForMissingStub: null);
}
