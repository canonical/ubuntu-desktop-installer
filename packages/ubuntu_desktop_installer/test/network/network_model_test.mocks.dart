// Mocks generated by Mockito 5.3.2 from annotations
// in ubuntu_desktop_installer/test/network/network_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ubuntu_desktop_installer/pages/network/connect_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ConnectModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectModel extends _i1.Mock implements _i2.ConnectModel {
  MockConnectModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get canConnect => (super.noSuchMethod(
        Invocation.getter(#canConnect),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnecting => (super.noSuchMethod(
        Invocation.getter(#isConnecting),
        returnValue: false,
      ) as bool);
  @override
  bool get hasActiveConnection => (super.noSuchMethod(
        Invocation.getter(#hasActiveConnection),
        returnValue: false,
      ) as bool);
  @override
  bool get isEnabled => (super.noSuchMethod(
        Invocation.getter(#isEnabled),
        returnValue: false,
      ) as bool);
  @override
  _i3.Stream<dynamic> get onAvailabilityChanged => (super.noSuchMethod(
        Invocation.getter(#onAvailabilityChanged),
        returnValue: _i3.Stream<dynamic>.empty(),
      ) as _i3.Stream<dynamic>);
  @override
  _i2.ConnectMode get connectMode => (super.noSuchMethod(
        Invocation.getter(#connectMode),
        returnValue: _i2.ConnectMode.none,
      ) as _i2.ConnectMode);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);
  @override
  void onSelected() => super.noSuchMethod(
        Invocation.method(
          #onSelected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onDeselected() => super.noSuchMethod(
        Invocation.method(
          #onDeselected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> cleanup() => (super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> enable() => (super.noSuchMethod(
        Invocation.method(
          #enable,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
