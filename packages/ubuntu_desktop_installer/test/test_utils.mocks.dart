// Mocks generated by Mockito 5.4.2 from annotations
// in ubuntu_desktop_installer/test/test_utils.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i12;

import 'package:dbus/dbus.dart' as _i21;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nm/nm.dart' as _i3;
import 'package:subiquity_client/subiquity_client.dart' as _i2;
import 'package:timezone_map/src/location.dart' as _i15;
import 'package:timezone_map/src/service.dart' as _i13;
import 'package:timezone_map/src/source.dart' as _i14;
import 'package:ubuntu_desktop_installer/services/active_directory_service.dart'
    as _i7;
import 'package:ubuntu_desktop_installer/services/app_service.dart' as _i9;
import 'package:ubuntu_desktop_installer/services/config_service.dart' as _i10;
import 'package:ubuntu_desktop_installer/services/desktop_service.dart' as _i11;
import 'package:ubuntu_desktop_installer/services/identity_service.dart'
    as _i16;
import 'package:ubuntu_desktop_installer/services/journal_service.dart' as _i17;
import 'package:ubuntu_desktop_installer/services/keyboard_service.dart'
    as _i18;
import 'package:ubuntu_desktop_installer/services/locale_service.dart' as _i19;
import 'package:ubuntu_desktop_installer/services/network_service.dart' as _i20;
import 'package:ubuntu_desktop_installer/services/power_service.dart' as _i22;
import 'package:ubuntu_desktop_installer/services/product_service.dart' as _i5;
import 'package:ubuntu_desktop_installer/services/sound_service.dart' as _i23;
import 'package:ubuntu_desktop_installer/services/storage_service.dart' as _i24;
import 'package:ubuntu_desktop_installer/services/telemetry_service.dart'
    as _i25;
import 'package:ubuntu_desktop_installer/services/timezone_service.dart'
    as _i26;
import 'package:ubuntu_desktop_installer/services/udev_service.dart' as _i6;
import 'package:ubuntu_wizard/src/utils/url_launcher.dart' as _i27;
import 'package:upower/upower.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAdConnectionInfo_0 extends _i1.SmartFake
    implements _i2.AdConnectionInfo {
  _FakeAdConnectionInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIdentityData_1 extends _i1.SmartFake implements _i2.IdentityData {
  _FakeIdentityData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeyboardSetup_2 extends _i1.SmartFake implements _i2.KeyboardSetup {
  _FakeKeyboardSetup_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnyStep_3 extends _i1.SmartFake implements _i2.AnyStep {
  _FakeAnyStep_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkManagerSettings_4 extends _i1.SmartFake
    implements _i3.NetworkManagerSettings {
  _FakeNetworkManagerSettings_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkManagerDnsManager_5 extends _i1.SmartFake
    implements _i3.NetworkManagerDnsManager {
  _FakeNetworkManagerDnsManager_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkManagerActiveConnection_6 extends _i1.SmartFake
    implements _i3.NetworkManagerActiveConnection {
  _FakeNetworkManagerActiveConnection_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUPowerKbdBacklight_7 extends _i1.SmartFake
    implements _i4.UPowerKbdBacklight {
  _FakeUPowerKbdBacklight_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUPowerDevice_8 extends _i1.SmartFake implements _i4.UPowerDevice {
  _FakeUPowerDevice_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductInfo_9 extends _i1.SmartFake implements _i5.ProductInfo {
  _FakeProductInfo_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGuidedStorageResponseV2_10 extends _i1.SmartFake
    implements _i2.GuidedStorageResponseV2 {
  _FakeGuidedStorageResponseV2_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUdevDeviceInfo_11 extends _i1.SmartFake
    implements _i6.UdevDeviceInfo {
  _FakeUdevDeviceInfo_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ActiveDirectoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockActiveDirectoryService extends _i1.Mock
    implements _i7.ActiveDirectoryService {
  MockActiveDirectoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> hasSupport() => (super.noSuchMethod(
        Invocation.method(
          #hasSupport,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<bool> isUsed() => (super.noSuchMethod(
        Invocation.method(
          #isUsed,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<void> setUsed(bool? used) => (super.noSuchMethod(
        Invocation.method(
          #setUsed,
          [used],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i2.AdConnectionInfo> getConnectionInfo() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionInfo,
          [],
        ),
        returnValue:
            _i8.Future<_i2.AdConnectionInfo>.value(_FakeAdConnectionInfo_0(
          this,
          Invocation.method(
            #getConnectionInfo,
            [],
          ),
        )),
      ) as _i8.Future<_i2.AdConnectionInfo>);
  @override
  _i8.Future<void> setConnectionInfo(_i2.AdConnectionInfo? info) =>
      (super.noSuchMethod(
        Invocation.method(
          #setConnectionInfo,
          [info],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<List<_i2.AdDomainNameValidation>> checkDomainName(
          String? domain) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkDomainName,
          [domain],
        ),
        returnValue: _i8.Future<List<_i2.AdDomainNameValidation>>.value(
            <_i2.AdDomainNameValidation>[]),
      ) as _i8.Future<List<_i2.AdDomainNameValidation>>);
  @override
  _i8.Future<_i2.AdAdminNameValidation> checkAdminName(String? admin) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAdminName,
          [admin],
        ),
        returnValue: _i8.Future<_i2.AdAdminNameValidation>.value(
            _i2.AdAdminNameValidation.OK),
      ) as _i8.Future<_i2.AdAdminNameValidation>);
  @override
  _i8.Future<_i2.AdPasswordValidation> checkPassword(String? password) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPassword,
          [password],
        ),
        returnValue: _i8.Future<_i2.AdPasswordValidation>.value(
            _i2.AdPasswordValidation.OK),
      ) as _i8.Future<_i2.AdPasswordValidation>);
  @override
  _i8.Future<_i2.AdDomainNameValidation> pingDomainController(String? domain) =>
      (super.noSuchMethod(
        Invocation.method(
          #pingDomainController,
          [domain],
        ),
        returnValue: _i8.Future<_i2.AdDomainNameValidation>.value(
            _i2.AdDomainNameValidation.OK),
      ) as _i8.Future<_i2.AdDomainNameValidation>);
  @override
  _i8.Future<_i2.AdJoinResult> getJoinResult({bool? wait = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJoinResult,
          [],
          {#wait: wait},
        ),
        returnValue: _i8.Future<_i2.AdJoinResult>.value(_i2.AdJoinResult.OK),
      ) as _i8.Future<_i2.AdJoinResult>);
}

/// A class which mocks [AppService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppService extends _i1.Mock implements _i9.AppService {
  MockAppService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [ConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigService extends _i1.Mock implements _i10.ConfigService {
  MockConfigService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<String?> get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);
  @override
  _i8.Future<void> set(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<Map<String, String?>> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue:
            _i8.Future<Map<String, String?>>.value(<String, String?>{}),
      ) as _i8.Future<Map<String, String?>>);
  @override
  _i8.Future<void> save(Map<String, String?>? config) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [config],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [DesktopService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDesktopService extends _i1.Mock implements _i11.DesktopService {
  MockDesktopService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> inhibit() => (super.noSuchMethod(
        Invocation.method(
          #inhibit,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setTheme(_i12.Brightness? brightness) => (super.noSuchMethod(
        Invocation.method(
          #setTheme,
          [brightness],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [GeoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeoService extends _i1.Mock implements _i13.GeoService {
  MockGeoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addSource(_i14.GeoSource? source) => super.noSuchMethod(
        Invocation.method(
          #addSource,
          [source],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeSource(_i14.GeoSource? source) => super.noSuchMethod(
        Invocation.method(
          #removeSource,
          [source],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i15.GeoLocation?> lookupLocation() => (super.noSuchMethod(
        Invocation.method(
          #lookupLocation,
          [],
        ),
        returnValue: _i8.Future<_i15.GeoLocation?>.value(),
      ) as _i8.Future<_i15.GeoLocation?>);
  @override
  _i8.Future<Iterable<_i15.GeoLocation>> searchLocation(String? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchLocation,
          [location],
        ),
        returnValue:
            _i8.Future<Iterable<_i15.GeoLocation>>.value(<_i15.GeoLocation>[]),
      ) as _i8.Future<Iterable<_i15.GeoLocation>>);
  @override
  _i8.Future<Iterable<_i15.GeoLocation>> searchCoordinates(
          _i15.LatLng? coordinates) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCoordinates,
          [coordinates],
        ),
        returnValue:
            _i8.Future<Iterable<_i15.GeoLocation>>.value(<_i15.GeoLocation>[]),
      ) as _i8.Future<Iterable<_i15.GeoLocation>>);
  @override
  _i8.Future<Iterable<_i15.GeoLocation>> searchTimezone(String? timezone) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTimezone,
          [timezone],
        ),
        returnValue:
            _i8.Future<Iterable<_i15.GeoLocation>>.value(<_i15.GeoLocation>[]),
      ) as _i8.Future<Iterable<_i15.GeoLocation>>);
  @override
  _i8.Future<void> cancelSearch() => (super.noSuchMethod(
        Invocation.method(
          #cancelSearch,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [IdentityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIdentityService extends _i1.Mock implements _i16.IdentityService {
  MockIdentityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.IdentityData> getIdentity() => (super.noSuchMethod(
        Invocation.method(
          #getIdentity,
          [],
        ),
        returnValue: _i8.Future<_i2.IdentityData>.value(_FakeIdentityData_1(
          this,
          Invocation.method(
            #getIdentity,
            [],
          ),
        )),
      ) as _i8.Future<_i2.IdentityData>);
  @override
  _i8.Future<void> setIdentity(_i2.IdentityData? identity) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIdentity,
          [identity],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i2.UsernameValidation> validateUsername(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateUsername,
          [username],
        ),
        returnValue:
            _i8.Future<_i2.UsernameValidation>.value(_i2.UsernameValidation.OK),
      ) as _i8.Future<_i2.UsernameValidation>);
}

/// A class which mocks [JournalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockJournalService extends _i1.Mock implements _i17.JournalService {
  MockJournalService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<String> start(
    List<String>? ids, {
    _i17.JournalOutput? output = _i17.JournalOutput.short,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [ids],
          {#output: output},
        ),
        returnValue: _i8.Stream<String>.empty(),
      ) as _i8.Stream<String>);
}

/// A class which mocks [KeyboardService].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyboardService extends _i1.Mock implements _i18.KeyboardService {
  MockKeyboardService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.KeyboardSetup> getKeyboard() => (super.noSuchMethod(
        Invocation.method(
          #getKeyboard,
          [],
        ),
        returnValue: _i8.Future<_i2.KeyboardSetup>.value(_FakeKeyboardSetup_2(
          this,
          Invocation.method(
            #getKeyboard,
            [],
          ),
        )),
      ) as _i8.Future<_i2.KeyboardSetup>);
  @override
  _i8.Future<void> setKeyboard(_i2.KeyboardSetting? setting) =>
      (super.noSuchMethod(
        Invocation.method(
          #setKeyboard,
          [setting],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setInputSource(
    _i2.KeyboardSetting? setting, {
    String? user,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInputSource,
          [setting],
          {#user: user},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i2.AnyStep> getKeyboardStep([String? step = r'0']) =>
      (super.noSuchMethod(
        Invocation.method(
          #getKeyboardStep,
          [step],
        ),
        returnValue: _i8.Future<_i2.AnyStep>.value(_FakeAnyStep_3(
          this,
          Invocation.method(
            #getKeyboardStep,
            [step],
          ),
        )),
      ) as _i8.Future<_i2.AnyStep>);
}

/// A class which mocks [LocaleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleService extends _i1.Mock implements _i19.LocaleService {
  MockLocaleService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<String> getLocale() => (super.noSuchMethod(
        Invocation.method(
          #getLocale,
          [],
        ),
        returnValue: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);
  @override
  _i8.Future<void> setLocale(String? locale) => (super.noSuchMethod(
        Invocation.method(
          #setLocale,
          [locale],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i20.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnectedSite => (super.noSuchMethod(
        Invocation.getter(#isConnectedSite),
        returnValue: false,
      ) as bool);
  @override
  List<_i3.NetworkManagerDevice> get wiredDevices => (super.noSuchMethod(
        Invocation.getter(#wiredDevices),
        returnValue: <_i3.NetworkManagerDevice>[],
      ) as List<_i3.NetworkManagerDevice>);
  @override
  List<_i3.NetworkManagerDevice> get wirelessDevices => (super.noSuchMethod(
        Invocation.getter(#wirelessDevices),
        returnValue: <_i3.NetworkManagerDevice>[],
      ) as List<_i3.NetworkManagerDevice>);
  @override
  _i8.Stream<_i3.NetworkManagerDevice> get deviceAdded => (super.noSuchMethod(
        Invocation.getter(#deviceAdded),
        returnValue: _i8.Stream<_i3.NetworkManagerDevice>.empty(),
      ) as _i8.Stream<_i3.NetworkManagerDevice>);
  @override
  _i8.Stream<_i3.NetworkManagerDevice> get deviceRemoved => (super.noSuchMethod(
        Invocation.getter(#deviceRemoved),
        returnValue: _i8.Stream<_i3.NetworkManagerDevice>.empty(),
      ) as _i8.Stream<_i3.NetworkManagerDevice>);
  @override
  _i8.Stream<_i3.NetworkManagerActiveConnection> get activeConnectionAdded =>
      (super.noSuchMethod(
        Invocation.getter(#activeConnectionAdded),
        returnValue: _i8.Stream<_i3.NetworkManagerActiveConnection>.empty(),
      ) as _i8.Stream<_i3.NetworkManagerActiveConnection>);
  @override
  _i8.Stream<_i3.NetworkManagerActiveConnection> get activeConnectionRemoved =>
      (super.noSuchMethod(
        Invocation.getter(#activeConnectionRemoved),
        returnValue: _i8.Stream<_i3.NetworkManagerActiveConnection>.empty(),
      ) as _i8.Stream<_i3.NetworkManagerActiveConnection>);
  @override
  _i8.Stream<List<String>> get propertiesChanged => (super.noSuchMethod(
        Invocation.getter(#propertiesChanged),
        returnValue: _i8.Stream<List<String>>.empty(),
      ) as _i8.Stream<List<String>>);
  @override
  List<_i3.NetworkManagerDevice> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i3.NetworkManagerDevice>[],
      ) as List<_i3.NetworkManagerDevice>);
  @override
  List<_i3.NetworkManagerDevice> get allDevices => (super.noSuchMethod(
        Invocation.getter(#allDevices),
        returnValue: <_i3.NetworkManagerDevice>[],
      ) as List<_i3.NetworkManagerDevice>);
  @override
  bool get networkingEnabled => (super.noSuchMethod(
        Invocation.getter(#networkingEnabled),
        returnValue: false,
      ) as bool);
  @override
  bool get wirelessEnabled => (super.noSuchMethod(
        Invocation.getter(#wirelessEnabled),
        returnValue: false,
      ) as bool);
  @override
  bool get wirelessHardwareEnabled => (super.noSuchMethod(
        Invocation.getter(#wirelessHardwareEnabled),
        returnValue: false,
      ) as bool);
  @override
  bool get wwanEnabled => (super.noSuchMethod(
        Invocation.getter(#wwanEnabled),
        returnValue: false,
      ) as bool);
  @override
  bool get wwanHardwareEnabled => (super.noSuchMethod(
        Invocation.getter(#wwanHardwareEnabled),
        returnValue: false,
      ) as bool);
  @override
  List<_i3.NetworkManagerActiveConnection> get activeConnections =>
      (super.noSuchMethod(
        Invocation.getter(#activeConnections),
        returnValue: <_i3.NetworkManagerActiveConnection>[],
      ) as List<_i3.NetworkManagerActiveConnection>);
  @override
  String get primaryConnectionType => (super.noSuchMethod(
        Invocation.getter(#primaryConnectionType),
        returnValue: '',
      ) as String);
  @override
  _i3.NetworkManagerMetered get metered => (super.noSuchMethod(
        Invocation.getter(#metered),
        returnValue: _i3.NetworkManagerMetered.unknown,
      ) as _i3.NetworkManagerMetered);
  @override
  bool get startup => (super.noSuchMethod(
        Invocation.getter(#startup),
        returnValue: false,
      ) as bool);
  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: '',
      ) as String);
  @override
  _i3.NetworkManagerConnectivityState get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _i3.NetworkManagerConnectivityState.unknown,
      ) as _i3.NetworkManagerConnectivityState);
  @override
  bool get connectivityCheckAvailable => (super.noSuchMethod(
        Invocation.getter(#connectivityCheckAvailable),
        returnValue: false,
      ) as bool);
  @override
  bool get connectivityCheckEnabled => (super.noSuchMethod(
        Invocation.getter(#connectivityCheckEnabled),
        returnValue: false,
      ) as bool);
  @override
  String get connectivityCheckUri => (super.noSuchMethod(
        Invocation.getter(#connectivityCheckUri),
        returnValue: '',
      ) as String);
  @override
  _i3.NetworkManagerState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i3.NetworkManagerState.unknown,
      ) as _i3.NetworkManagerState);
  @override
  _i3.NetworkManagerSettings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeNetworkManagerSettings_4(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i3.NetworkManagerSettings);
  @override
  _i3.NetworkManagerDnsManager get dnsManager => (super.noSuchMethod(
        Invocation.getter(#dnsManager),
        returnValue: _FakeNetworkManagerDnsManager_5(
          this,
          Invocation.getter(#dnsManager),
        ),
      ) as _i3.NetworkManagerDnsManager);
  @override
  Map<String, Map<String, _i21.DBusValue>> getWifiSettings(
          {required String? ssid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWifiSettings,
          [],
          {#ssid: ssid},
        ),
        returnValue: <String, Map<String, _i21.DBusValue>>{},
      ) as Map<String, Map<String, _i21.DBusValue>>);
  @override
  _i8.Future<void> markConfigured() => (super.noSuchMethod(
        Invocation.method(
          #markConfigured,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setWirelessEnabled(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setWirelessEnabled,
          [value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setWwanEnabled(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setWwanEnabled,
          [value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setConnectivityCheckEnabled(bool? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #setConnectivityCheckEnabled,
          [value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i3.NetworkManagerActiveConnection> addAndActivateConnection({
    Map<String, Map<String, _i21.DBusValue>>? connection = const {},
    required _i3.NetworkManagerDevice? device,
    _i3.NetworkManagerAccessPoint? accessPoint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAndActivateConnection,
          [],
          {
            #connection: connection,
            #device: device,
            #accessPoint: accessPoint,
          },
        ),
        returnValue: _i8.Future<_i3.NetworkManagerActiveConnection>.value(
            _FakeNetworkManagerActiveConnection_6(
          this,
          Invocation.method(
            #addAndActivateConnection,
            [],
            {
              #connection: connection,
              #device: device,
              #accessPoint: accessPoint,
            },
          ),
        )),
      ) as _i8.Future<_i3.NetworkManagerActiveConnection>);
  @override
  _i8.Future<_i3.NetworkManagerActiveConnection> activateConnection({
    required _i3.NetworkManagerDevice? device,
    _i3.NetworkManagerSettingsConnection? connection,
    _i3.NetworkManagerAccessPoint? accessPoint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #activateConnection,
          [],
          {
            #device: device,
            #connection: connection,
            #accessPoint: accessPoint,
          },
        ),
        returnValue: _i8.Future<_i3.NetworkManagerActiveConnection>.value(
            _FakeNetworkManagerActiveConnection_6(
          this,
          Invocation.method(
            #activateConnection,
            [],
            {
              #device: device,
              #connection: connection,
              #accessPoint: accessPoint,
            },
          ),
        )),
      ) as _i8.Future<_i3.NetworkManagerActiveConnection>);
  @override
  _i8.Future<void> deactivateConnection(
          _i3.NetworkManagerActiveConnection? connection) =>
      (super.noSuchMethod(
        Invocation.method(
          #deactivateConnection,
          [connection],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [PowerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPowerService extends _i1.Mock implements _i22.PowerService {
  MockPowerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UPowerKbdBacklight get kbdBacklight => (super.noSuchMethod(
        Invocation.getter(#kbdBacklight),
        returnValue: _FakeUPowerKbdBacklight_7(
          this,
          Invocation.getter(#kbdBacklight),
        ),
      ) as _i4.UPowerKbdBacklight);
  @override
  set kbdBacklight(_i4.UPowerKbdBacklight? _kbdBacklight) => super.noSuchMethod(
        Invocation.setter(
          #kbdBacklight,
          _kbdBacklight,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get daemonVersion => (super.noSuchMethod(
        Invocation.getter(#daemonVersion),
        returnValue: '',
      ) as String);
  @override
  bool get onBattery => (super.noSuchMethod(
        Invocation.getter(#onBattery),
        returnValue: false,
      ) as bool);
  @override
  bool get lidIsPresent => (super.noSuchMethod(
        Invocation.getter(#lidIsPresent),
        returnValue: false,
      ) as bool);
  @override
  bool get lidIsClosed => (super.noSuchMethod(
        Invocation.getter(#lidIsClosed),
        returnValue: false,
      ) as bool);
  @override
  List<_i4.UPowerDevice> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i4.UPowerDevice>[],
      ) as List<_i4.UPowerDevice>);
  @override
  _i4.UPowerDevice get displayDevice => (super.noSuchMethod(
        Invocation.getter(#displayDevice),
        returnValue: _FakeUPowerDevice_8(
          this,
          Invocation.getter(#displayDevice),
        ),
      ) as _i4.UPowerDevice);
  @override
  _i8.Stream<_i4.UPowerDevice> get deviceAdded => (super.noSuchMethod(
        Invocation.getter(#deviceAdded),
        returnValue: _i8.Stream<_i4.UPowerDevice>.empty(),
      ) as _i8.Stream<_i4.UPowerDevice>);
  @override
  _i8.Stream<_i4.UPowerDevice> get deviceRemoved => (super.noSuchMethod(
        Invocation.getter(#deviceRemoved),
        returnValue: _i8.Stream<_i4.UPowerDevice>.empty(),
      ) as _i8.Stream<_i4.UPowerDevice>);
  @override
  _i8.Stream<List<String>> get propertiesChanged => (super.noSuchMethod(
        Invocation.getter(#propertiesChanged),
        returnValue: _i8.Stream<List<String>>.empty(),
      ) as _i8.Stream<List<String>>);
  @override
  _i8.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<String> getCriticalAction() => (super.noSuchMethod(
        Invocation.method(
          #getCriticalAction,
          [],
        ),
        returnValue: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [ProductService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductService extends _i1.Mock implements _i5.ProductService {
  MockProductService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductInfo getProductInfo() => (super.noSuchMethod(
        Invocation.method(
          #getProductInfo,
          [],
        ),
        returnValue: _FakeProductInfo_9(
          this,
          Invocation.method(
            #getProductInfo,
            [],
          ),
        ),
      ) as _i5.ProductInfo);
}

/// A class which mocks [SoundService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoundService extends _i1.Mock implements _i23.SoundService {
  MockSoundService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> play(String? id) => (super.noSuchMethod(
        Invocation.method(
          #play,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i24.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasMultipleDisks => (super.noSuchMethod(
        Invocation.getter(#hasMultipleDisks),
        returnValue: false,
      ) as bool);
  @override
  bool get needRoot => (super.noSuchMethod(
        Invocation.getter(#needRoot),
        returnValue: false,
      ) as bool);
  @override
  bool get needBoot => (super.noSuchMethod(
        Invocation.getter(#needBoot),
        returnValue: false,
      ) as bool);
  @override
  bool get useEncryption => (super.noSuchMethod(
        Invocation.getter(#useEncryption),
        returnValue: false,
      ) as bool);
  @override
  set useEncryption(bool? useEncryption) => super.noSuchMethod(
        Invocation.setter(
          #useEncryption,
          useEncryption,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get useLvm => (super.noSuchMethod(
        Invocation.getter(#useLvm),
        returnValue: false,
      ) as bool);
  @override
  set useLvm(bool? useLvm) => super.noSuchMethod(
        Invocation.setter(
          #useLvm,
          useLvm,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set securityKey(String? securityKey) => super.noSuchMethod(
        Invocation.setter(
          #securityKey,
          securityKey,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set guidedTarget(_i2.GuidedStorageTarget? target) => super.noSuchMethod(
        Invocation.setter(
          #guidedTarget,
          target,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get installMinimumSize => (super.noSuchMethod(
        Invocation.getter(#installMinimumSize),
        returnValue: 0,
      ) as int);
  @override
  int get largestDiskSize => (super.noSuchMethod(
        Invocation.getter(#largestDiskSize),
        returnValue: 0,
      ) as int);
  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<bool> hasSecureBoot() => (super.noSuchMethod(
        Invocation.method(
          #hasSecureBoot,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<bool> hasBitLocker() => (super.noSuchMethod(
        Invocation.method(
          #hasBitLocker,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<_i2.GuidedStorageResponseV2> getGuidedStorage() =>
      (super.noSuchMethod(
        Invocation.method(
          #getGuidedStorage,
          [],
        ),
        returnValue: _i8.Future<_i2.GuidedStorageResponseV2>.value(
            _FakeGuidedStorageResponseV2_10(
          this,
          Invocation.method(
            #getGuidedStorage,
            [],
          ),
        )),
      ) as _i8.Future<_i2.GuidedStorageResponseV2>);
  @override
  _i8.Future<void> setGuidedStorage() => (super.noSuchMethod(
        Invocation.method(
          #setGuidedStorage,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<List<_i2.Disk>> getStorage() => (super.noSuchMethod(
        Invocation.method(
          #getStorage,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Disk>>.value(<_i2.Disk>[]),
      ) as _i8.Future<List<_i2.Disk>>);
  @override
  _i8.Future<List<_i2.Disk>> getOriginalStorage() => (super.noSuchMethod(
        Invocation.method(
          #getOriginalStorage,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Disk>>.value(<_i2.Disk>[]),
      ) as _i8.Future<List<_i2.Disk>>);
  @override
  _i8.Future<List<_i2.Disk>> addPartition(
    _i2.Disk? disk,
    _i2.Gap? gap,
    _i2.Partition? partition,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPartition,
          [
            disk,
            gap,
            partition,
          ],
        ),
        returnValue: _i8.Future<List<_i2.Disk>>.value(<_i2.Disk>[]),
      ) as _i8.Future<List<_i2.Disk>>);
  @override
  _i8.Future<List<_i2.Disk>> editPartition(
    _i2.Disk? disk,
    _i2.Partition? partition,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editPartition,
          [
            disk,
            partition,
          ],
        ),
        returnValue: _i8.Future<List<_i2.Disk>>.value(<_i2.Disk>[]),
      ) as _i8.Future<List<_i2.Disk>>);
  @override
  _i8.Future<List<_i2.Disk>> deletePartition(
    _i2.Disk? disk,
    _i2.Partition? partition,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePartition,
          [
            disk,
            partition,
          ],
        ),
        returnValue: _i8.Future<List<_i2.Disk>>.value(<_i2.Disk>[]),
      ) as _i8.Future<List<_i2.Disk>>);
  @override
  _i8.Future<List<_i2.Disk>> setStorage() => (super.noSuchMethod(
        Invocation.method(
          #setStorage,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Disk>>.value(<_i2.Disk>[]),
      ) as _i8.Future<List<_i2.Disk>>);
  @override
  _i8.Future<List<_i2.Disk>> resetStorage() => (super.noSuchMethod(
        Invocation.method(
          #resetStorage,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Disk>>.value(<_i2.Disk>[]),
      ) as _i8.Future<List<_i2.Disk>>);
  @override
  _i8.Future<List<_i2.Disk>> addBootPartition(_i2.Disk? disk) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBootPartition,
          [disk],
        ),
        returnValue: _i8.Future<List<_i2.Disk>>.value(<_i2.Disk>[]),
      ) as _i8.Future<List<_i2.Disk>>);
  @override
  _i8.Future<List<_i2.Disk>> reformatDisk(_i2.Disk? disk) =>
      (super.noSuchMethod(
        Invocation.method(
          #reformatDisk,
          [disk],
        ),
        returnValue: _i8.Future<List<_i2.Disk>>.value(<_i2.Disk>[]),
      ) as _i8.Future<List<_i2.Disk>>);
}

/// A class which mocks [TelemetryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTelemetryService extends _i1.Mock implements _i25.TelemetryService {
  MockTelemetryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> init([Map<String, dynamic>? metrics = const {}]) =>
      (super.noSuchMethod(
        Invocation.method(
          #init,
          [metrics],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> addStage(String? name) => (super.noSuchMethod(
        Invocation.method(
          #addStage,
          [name],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> addMetric(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMetric,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> addMetrics(Map<String, dynamic>? entries) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMetrics,
          [entries],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [TimezoneService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimezoneService extends _i1.Mock implements _i26.TimezoneService {
  MockTimezoneService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<String> getTimezone() => (super.noSuchMethod(
        Invocation.method(
          #getTimezone,
          [],
        ),
        returnValue: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);
  @override
  _i8.Future<void> setTimezone(String? timezone) => (super.noSuchMethod(
        Invocation.method(
          #setTimezone,
          [timezone],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [UdevDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockUdevDeviceInfo extends _i1.Mock implements _i6.UdevDeviceInfo {
  MockUdevDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get fullName => (super.noSuchMethod(
        Invocation.getter(#fullName),
        returnValue: '',
      ) as String);
}

/// A class which mocks [UdevService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUdevService extends _i1.Mock implements _i6.UdevService {
  MockUdevService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.UdevDeviceInfo bySysname(String? sysname) => (super.noSuchMethod(
        Invocation.method(
          #bySysname,
          [sysname],
        ),
        returnValue: _FakeUdevDeviceInfo_11(
          this,
          Invocation.method(
            #bySysname,
            [sysname],
          ),
        ),
      ) as _i6.UdevDeviceInfo);
  @override
  _i6.UdevDeviceInfo bySyspath(String? syspath) => (super.noSuchMethod(
        Invocation.method(
          #bySyspath,
          [syspath],
        ),
        returnValue: _FakeUdevDeviceInfo_11(
          this,
          Invocation.method(
            #bySyspath,
            [syspath],
          ),
        ),
      ) as _i6.UdevDeviceInfo);
}

/// A class which mocks [UrlLauncher].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncher extends _i1.Mock implements _i27.UrlLauncher {
  MockUrlLauncher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> launchUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #launchUrl,
          [url],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}
