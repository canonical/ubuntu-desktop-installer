// Mocks generated by Mockito 5.0.14 from annotations
// in ubuntu_desktop_installer/test/ubuntu_pro/ubuntu_pro_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ubuntu_desktop_installer/services/ubuntu_pro_client.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [UbuntuProClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockUbuntuProClient extends _i1.Mock implements _i2.UbuntuProClient {
  MockUbuntuProClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get daemonVersion =>
      (super.noSuchMethod(Invocation.getter(#daemonVersion), returnValue: '')
          as String);
  @override
  bool get isAttached =>
      (super.noSuchMethod(Invocation.getter(#isAttached), returnValue: false)
          as bool);
  @override
  _i3.Stream<List<String>> get propertiesChanged => (super.noSuchMethod(
      Invocation.getter(#propertiesChanged),
      returnValue: Stream<List<String>>.empty()) as _i3.Stream<List<String>>);
  @override
  _i3.Future<void> connect() =>
      (super.noSuchMethod(Invocation.method(#connect, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> attach(String? token) =>
      (super.noSuchMethod(Invocation.method(#attach, [token]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> detach() =>
      (super.noSuchMethod(Invocation.method(#detach, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}
