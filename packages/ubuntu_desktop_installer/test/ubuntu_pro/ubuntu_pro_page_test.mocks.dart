// Mocks generated by Mockito 5.0.14 from annotations
// in ubuntu_desktop_installer/test/ubuntu_pro/ubuntu_pro_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ubuntu_desktop_installer/pages/ubuntu_pro/ubuntu_pro_model.dart'
    as _i2;
import 'package:ubuntu_wizard/utils.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [UbuntuProModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUbuntuProModel extends _i1.Mock implements _i2.UbuntuProModel {
  MockUbuntuProModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isOnline =>
      (super.noSuchMethod(Invocation.getter(#isOnline), returnValue: false)
          as bool);
  @override
  bool get isAttached =>
      (super.noSuchMethod(Invocation.getter(#isAttached), returnValue: false)
          as bool);
  @override
  bool get isAttaching =>
      (super.noSuchMethod(Invocation.getter(#isAttaching), returnValue: false)
          as bool);
  @override
  bool get isEnabled =>
      (super.noSuchMethod(Invocation.getter(#isEnabled), returnValue: false)
          as bool);
  @override
  bool get hasError =>
      (super.noSuchMethod(Invocation.getter(#hasError), returnValue: false)
          as bool);
  @override
  bool get hasValidToken =>
      (super.noSuchMethod(Invocation.getter(#hasValidToken), returnValue: false)
          as bool);
  @override
  _i2.UbuntuProMode get mode => (super.noSuchMethod(Invocation.getter(#mode),
      returnValue: _i2.UbuntuProMode.enable) as _i2.UbuntuProMode);
  @override
  set mode(_i2.UbuntuProMode? mode) =>
      super.noSuchMethod(Invocation.setter(#mode, mode),
          returnValueForMissingStub: null);
  @override
  _i2.UbuntuProStatus get status =>
      (super.noSuchMethod(Invocation.getter(#status),
          returnValue: _i2.UbuntuProStatus.init) as _i2.UbuntuProStatus);
  @override
  String get token =>
      (super.noSuchMethod(Invocation.getter(#token), returnValue: '')
          as String);
  @override
  set token(String? token) =>
      super.noSuchMethod(Invocation.setter(#token, token),
          returnValueForMissingStub: null);
  @override
  bool get isDisposed =>
      (super.noSuchMethod(Invocation.getter(#isDisposed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i3.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> save() => (super.noSuchMethod(Invocation.method(#save, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i3.Future<void> attach() =>
      (super.noSuchMethod(Invocation.method(#attach, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> detach() =>
      (super.noSuchMethod(Invocation.method(#detach, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  void setProperties(_i3.Stream<List<String>>? properties) =>
      super.noSuchMethod(Invocation.method(#setProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  void addPropertyListener(String? property, _i4.VoidCallback? onChanged) =>
      super.noSuchMethod(
          Invocation.method(#addPropertyListener, [property, onChanged]),
          returnValueForMissingStub: null);
  @override
  void enablePropertyListeners() =>
      super.noSuchMethod(Invocation.method(#enablePropertyListeners, []),
          returnValueForMissingStub: null);
  @override
  void disablePropertyListeners() =>
      super.noSuchMethod(Invocation.method(#disablePropertyListeners, []),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  void addListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UrlLauncher].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncher extends _i1.Mock implements _i5.UrlLauncher {
  MockUrlLauncher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> launchUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#launchUrl, [url]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  String toString() => super.toString();
}
