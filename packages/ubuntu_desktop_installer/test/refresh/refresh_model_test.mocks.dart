// Mocks generated by Mockito 5.3.2 from annotations
// in ubuntu_desktop_installer/test/refresh/refresh_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ubuntu_desktop_installer/services/refresh_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRefreshState_0 extends _i1.SmartFake implements _i2.RefreshState {
  _FakeRefreshState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RefreshService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRefreshService extends _i1.Mock implements _i2.RefreshService {
  MockRefreshService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RefreshState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRefreshState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.RefreshState);
  @override
  _i3.Stream<_i2.RefreshState> get stateChanged => (super.noSuchMethod(
        Invocation.getter(#stateChanged),
        returnValue: _i3.Stream<_i2.RefreshState>.empty(),
      ) as _i3.Stream<_i2.RefreshState>);
  @override
  _i3.Future<_i2.RefreshState> check() => (super.noSuchMethod(
        Invocation.method(
          #check,
          [],
        ),
        returnValue: _i3.Future<_i2.RefreshState>.value(_FakeRefreshState_0(
          this,
          Invocation.method(
            #check,
            [],
          ),
        )),
      ) as _i3.Future<_i2.RefreshState>);
  @override
  _i3.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
