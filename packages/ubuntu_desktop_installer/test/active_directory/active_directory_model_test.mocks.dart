// Mocks generated by Mockito 5.3.2 from annotations
// in ubuntu_desktop_installer/test/active_directory/active_directory_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:subiquity_client/subiquity_client.dart' as _i2;
import 'package:ubuntu_desktop_installer/services/active_directory_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAdConnectionInfo_0 extends _i1.SmartFake
    implements _i2.AdConnectionInfo {
  _FakeAdConnectionInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ActiveDirectoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockActiveDirectoryService extends _i1.Mock
    implements _i3.ActiveDirectoryService {
  MockActiveDirectoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> hasSupport() => (super.noSuchMethod(
        Invocation.method(
          #hasSupport,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.AdConnectionInfo> getConnectionInfo() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionInfo,
          [],
        ),
        returnValue:
            _i4.Future<_i2.AdConnectionInfo>.value(_FakeAdConnectionInfo_0(
          this,
          Invocation.method(
            #getConnectionInfo,
            [],
          ),
        )),
      ) as _i4.Future<_i2.AdConnectionInfo>);
  @override
  _i4.Future<void> setConnectionInfo(_i2.AdConnectionInfo? info) =>
      (super.noSuchMethod(
        Invocation.method(
          #setConnectionInfo,
          [info],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<List<_i2.AdDomainNameValidation>> checkDomainName(
          String? domain) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkDomainName,
          [domain],
        ),
        returnValue: _i4.Future<List<_i2.AdDomainNameValidation>>.value(
            <_i2.AdDomainNameValidation>[]),
      ) as _i4.Future<List<_i2.AdDomainNameValidation>>);
  @override
  _i4.Future<_i2.AdAdminNameValidation> checkAdminName(String? admin) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAdminName,
          [admin],
        ),
        returnValue: _i4.Future<_i2.AdAdminNameValidation>.value(
            _i2.AdAdminNameValidation.OK),
      ) as _i4.Future<_i2.AdAdminNameValidation>);
  @override
  _i4.Future<_i2.AdPasswordValidation> checkPassword(String? password) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPassword,
          [password],
        ),
        returnValue: _i4.Future<_i2.AdPasswordValidation>.value(
            _i2.AdPasswordValidation.OK),
      ) as _i4.Future<_i2.AdPasswordValidation>);
  @override
  _i4.Future<_i2.AdDomainNameValidation> pingDomainController(String? domain) =>
      (super.noSuchMethod(
        Invocation.method(
          #pingDomainController,
          [domain],
        ),
        returnValue: _i4.Future<_i2.AdDomainNameValidation>.value(
            _i2.AdDomainNameValidation.OK),
      ) as _i4.Future<_i2.AdDomainNameValidation>);
  @override
  _i4.Future<_i2.AdJoinResult> getJoinResult({bool? wait = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJoinResult,
          [],
          {#wait: wait},
        ),
        returnValue: _i4.Future<_i2.AdJoinResult>.value(_i2.AdJoinResult.OK),
      ) as _i4.Future<_i2.AdJoinResult>);
  @override
  _i4.Future<void> markConfigured() => (super.noSuchMethod(
        Invocation.method(
          #markConfigured,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
