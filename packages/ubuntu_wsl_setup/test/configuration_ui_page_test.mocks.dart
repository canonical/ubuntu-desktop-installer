// Mocks generated by Mockito 5.0.14 from annotations
// in ubuntu_wsl_setup/test/configuration_ui_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ubuntu_wsl_setup/pages/configuration_ui/configuration_ui_model.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [ConfigurationUIModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigurationUIModel extends _i1.Mock
    implements _i2.ConfigurationUIModel {
  MockConfigurationUIModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get interopGuiintegration =>
      (super.noSuchMethod(Invocation.getter(#interopGuiintegration),
          returnValue: false) as bool);
  @override
  set interopGuiintegration(bool? value) =>
      super.noSuchMethod(Invocation.setter(#interopGuiintegration, value),
          returnValueForMissingStub: null);
  @override
  bool get interopAudiointegration =>
      (super.noSuchMethod(Invocation.getter(#interopAudiointegration),
          returnValue: false) as bool);
  @override
  set interopAudiointegration(bool? value) =>
      super.noSuchMethod(Invocation.setter(#interopAudiointegration, value),
          returnValueForMissingStub: null);
  @override
  bool get advancedIPDetection =>
      (super.noSuchMethod(Invocation.getter(#advancedIPDetection),
          returnValue: false) as bool);
  @override
  set advancedIPDetection(bool? value) =>
      super.noSuchMethod(Invocation.setter(#advancedIPDetection, value),
          returnValueForMissingStub: null);
  @override
  bool get motdWSLnewsenabled =>
      (super.noSuchMethod(Invocation.getter(#motdWSLnewsenabled),
          returnValue: false) as bool);
  @override
  set motdWSLnewsenabled(bool? value) =>
      super.noSuchMethod(Invocation.setter(#motdWSLnewsenabled, value),
          returnValueForMissingStub: null);
  @override
  bool get automountEnabled =>
      (super.noSuchMethod(Invocation.getter(#automountEnabled),
          returnValue: false) as bool);
  @override
  set automountEnabled(bool? value) =>
      super.noSuchMethod(Invocation.setter(#automountEnabled, value),
          returnValueForMissingStub: null);
  @override
  bool get automountMountfstab =>
      (super.noSuchMethod(Invocation.getter(#automountMountfstab),
          returnValue: false) as bool);
  @override
  set automountMountfstab(bool? value) =>
      super.noSuchMethod(Invocation.setter(#automountMountfstab, value),
          returnValueForMissingStub: null);
  @override
  bool get isValid =>
      (super.noSuchMethod(Invocation.getter(#isValid), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i3.Future<void> loadConfiguration() =>
      (super.noSuchMethod(Invocation.method(#loadConfiguration, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveConfiguration() =>
      (super.noSuchMethod(Invocation.method(#saveConfiguration, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  void addListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i4.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
