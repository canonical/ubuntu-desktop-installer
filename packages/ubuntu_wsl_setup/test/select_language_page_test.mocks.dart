// Mocks generated by Mockito 5.1.0 from annotations
// in ubuntu_wsl_setup/test/select_language_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i2;

import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ubuntu_wizard/settings.dart' as _i5;
import 'package:ubuntu_wsl_setup/pages/select_language/select_language_model.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLocale_0 extends _i1.Fake implements _i2.Locale {}

/// A class which mocks [SelectLanguageModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSelectLanguageModel extends _i1.Mock
    implements _i3.SelectLanguageModel {
  MockSelectLanguageModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get selectedLanguageIndex =>
      (super.noSuchMethod(Invocation.getter(#selectedLanguageIndex),
          returnValue: 0) as int);
  @override
  set selectedLanguageIndex(int? index) =>
      super.noSuchMethod(Invocation.setter(#selectedLanguageIndex, index),
          returnValueForMissingStub: null);
  @override
  int get languageCount =>
      (super.noSuchMethod(Invocation.getter(#languageCount), returnValue: 0)
          as int);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i4.Future<void> loadLanguages() =>
      (super.noSuchMethod(Invocation.method(#loadLanguages, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i2.Locale locale(int? index) =>
      (super.noSuchMethod(Invocation.method(#locale, [index]),
          returnValue: _FakeLocale_0()) as _i2.Locale);
  @override
  _i4.Future<void> applyLocale(_i2.Locale? locale) =>
      (super.noSuchMethod(Invocation.method(#applyLocale, [locale]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String language(int? index) => (super
          .noSuchMethod(Invocation.method(#language, [index]), returnValue: '')
      as String);
  @override
  void selectLocale(_i2.Locale? locale) =>
      super.noSuchMethod(Invocation.method(#selectLocale, [locale]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i2.Locale> getServerLocale() =>
      (super.noSuchMethod(Invocation.method(#getServerLocale, []),
              returnValue: Future<_i2.Locale>.value(_FakeLocale_0()))
          as _i4.Future<_i2.Locale>);
  @override
  void addListener(_i2.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i2.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [Settings].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettings extends _i1.Mock implements _i5.Settings {
  MockSettings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.ThemeMode get theme => (super.noSuchMethod(Invocation.getter(#theme),
      returnValue: _i6.ThemeMode.system) as _i6.ThemeMode);
  @override
  _i2.Locale get locale => (super.noSuchMethod(Invocation.getter(#locale),
      returnValue: _FakeLocale_0()) as _i2.Locale);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void applyTheme(_i2.Brightness? brightness) =>
      super.noSuchMethod(Invocation.method(#applyTheme, [brightness]),
          returnValueForMissingStub: null);
  @override
  void applyLocale(_i2.Locale? locale) =>
      super.noSuchMethod(Invocation.method(#applyLocale, [locale]),
          returnValueForMissingStub: null);
  @override
  void addListener(_i2.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i2.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
