// Mocks generated by Mockito 5.1.0 from annotations
// in ubuntu_wsl_setup/test/services_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:io' as _i2;

import 'package:args/src/arg_results.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeInternetAddress_0 extends _i1.Fake implements _i2.InternetAddress {}

class _FakeSocket_1 extends _i1.Fake implements _i2.Socket {}

class _FakeServerSocket_2 extends _i1.Fake implements _i2.ServerSocket {}

class _FakeStreamSubscription_3<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

/// A class which mocks [ArgResults].
///
/// See the documentation for Mockito's code generation for more information.
class MockArgResults extends _i1.Mock implements _i4.ArgResults {
  MockArgResults() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> get rest =>
      (super.noSuchMethod(Invocation.getter(#rest), returnValue: <String>[])
          as List<String>);
  @override
  List<String> get arguments => (super
          .noSuchMethod(Invocation.getter(#arguments), returnValue: <String>[])
      as List<String>);
  @override
  Iterable<String> get options =>
      (super.noSuchMethod(Invocation.getter(#options), returnValue: <String>[])
          as Iterable<String>);
  @override
  dynamic operator [](String? name) =>
      super.noSuchMethod(Invocation.method(#[], [name]));
  @override
  bool wasParsed(String? name) =>
      (super.noSuchMethod(Invocation.method(#wasParsed, [name]),
          returnValue: false) as bool);
}

/// A class which mocks [ServerSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockServerSocket extends _i1.Mock implements _i2.ServerSocket {
  MockServerSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get port =>
      (super.noSuchMethod(Invocation.getter(#port), returnValue: 0) as int);
  @override
  _i2.InternetAddress get address =>
      (super.noSuchMethod(Invocation.getter(#address),
          returnValue: _FakeInternetAddress_0()) as _i2.InternetAddress);
  @override
  bool get isBroadcast =>
      (super.noSuchMethod(Invocation.getter(#isBroadcast), returnValue: false)
          as bool);
  @override
  _i3.Future<int> get length => (super.noSuchMethod(Invocation.getter(#length),
      returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<bool> get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i2.Socket> get first => (super.noSuchMethod(
          Invocation.getter(#first),
          returnValue: Future<_i2.Socket>.value(_FakeSocket_1()))
      as _i3.Future<_i2.Socket>);
  @override
  _i3.Future<_i2.Socket> get last =>
      (super.noSuchMethod(Invocation.getter(#last),
              returnValue: Future<_i2.Socket>.value(_FakeSocket_1()))
          as _i3.Future<_i2.Socket>);
  @override
  _i3.Future<_i2.Socket> get single =>
      (super.noSuchMethod(Invocation.getter(#single),
              returnValue: Future<_i2.Socket>.value(_FakeSocket_1()))
          as _i3.Future<_i2.Socket>);
  @override
  _i3.Future<_i2.ServerSocket> close() => (super.noSuchMethod(
          Invocation.method(#close, []),
          returnValue: Future<_i2.ServerSocket>.value(_FakeServerSocket_2()))
      as _i3.Future<_i2.ServerSocket>);
  @override
  _i3.Stream<_i2.Socket> asBroadcastStream(
          {void Function(_i3.StreamSubscription<_i2.Socket>)? onListen,
          void Function(_i3.StreamSubscription<_i2.Socket>)? onCancel}) =>
      (super.noSuchMethod(
          Invocation.method(#asBroadcastStream, [],
              {#onListen: onListen, #onCancel: onCancel}),
          returnValue: Stream<_i2.Socket>.empty()) as _i3.Stream<_i2.Socket>);
  @override
  _i3.StreamSubscription<_i2.Socket> listen(void Function(_i2.Socket)? onData,
          {Function? onError, void Function()? onDone, bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_3<_i2.Socket>())
          as _i3.StreamSubscription<_i2.Socket>);
  @override
  _i3.Stream<_i2.Socket> where(bool Function(_i2.Socket)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
          returnValue: Stream<_i2.Socket>.empty()) as _i3.Stream<_i2.Socket>);
  @override
  _i3.Stream<S> map<S>(S Function(_i2.Socket)? convert) =>
      (super.noSuchMethod(Invocation.method(#map, [convert]),
          returnValue: Stream<S>.empty()) as _i3.Stream<S>);
  @override
  _i3.Stream<E> asyncMap<E>(_i3.FutureOr<E>? Function(_i2.Socket)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncMap, [convert]),
          returnValue: Stream<E>.empty()) as _i3.Stream<E>);
  @override
  _i3.Stream<E> asyncExpand<E>(_i3.Stream<E>? Function(_i2.Socket)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncExpand, [convert]),
          returnValue: Stream<E>.empty()) as _i3.Stream<E>);
  @override
  _i3.Stream<_i2.Socket> handleError(Function? onError,
          {bool Function(dynamic)? test}) =>
      (super.noSuchMethod(
          Invocation.method(#handleError, [onError], {#test: test}),
          returnValue: Stream<_i2.Socket>.empty()) as _i3.Stream<_i2.Socket>);
  @override
  _i3.Stream<S> expand<S>(Iterable<S> Function(_i2.Socket)? convert) =>
      (super.noSuchMethod(Invocation.method(#expand, [convert]),
          returnValue: Stream<S>.empty()) as _i3.Stream<S>);
  @override
  _i3.Future<dynamic> pipe(_i3.StreamConsumer<_i2.Socket>? streamConsumer) =>
      (super.noSuchMethod(Invocation.method(#pipe, [streamConsumer]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Stream<S> transform<S>(
          _i3.StreamTransformer<_i2.Socket, S>? streamTransformer) =>
      (super.noSuchMethod(Invocation.method(#transform, [streamTransformer]),
          returnValue: Stream<S>.empty()) as _i3.Stream<S>);
  @override
  _i3.Future<_i2.Socket> reduce(
          _i2.Socket Function(_i2.Socket, _i2.Socket)? combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
              returnValue: Future<_i2.Socket>.value(_FakeSocket_1()))
          as _i3.Future<_i2.Socket>);
  @override
  _i3.Future<S> fold<S>(S? initialValue, S Function(S, _i2.Socket)? combine) =>
      (super.noSuchMethod(Invocation.method(#fold, [initialValue, combine]),
          returnValue: Future<S>.value(null)) as _i3.Future<S>);
  @override
  _i3.Future<String> join([String? separator = r'']) =>
      (super.noSuchMethod(Invocation.method(#join, [separator]),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<bool> contains(Object? needle) =>
      (super.noSuchMethod(Invocation.method(#contains, [needle]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<dynamic> forEach(void Function(_i2.Socket)? action) =>
      (super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<bool> every(bool Function(_i2.Socket)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> any(bool Function(_i2.Socket)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Stream<R> cast<R>() => (super.noSuchMethod(Invocation.method(#cast, []),
      returnValue: Stream<R>.empty()) as _i3.Stream<R>);
  @override
  _i3.Future<List<_i2.Socket>> toList() =>
      (super.noSuchMethod(Invocation.method(#toList, []),
              returnValue: Future<List<_i2.Socket>>.value(<_i2.Socket>[]))
          as _i3.Future<List<_i2.Socket>>);
  @override
  _i3.Future<Set<_i2.Socket>> toSet() =>
      (super.noSuchMethod(Invocation.method(#toSet, []),
              returnValue: Future<Set<_i2.Socket>>.value(<_i2.Socket>{}))
          as _i3.Future<Set<_i2.Socket>>);
  @override
  _i3.Future<E> drain<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#drain, [futureValue]),
          returnValue: Future<E>.value(null)) as _i3.Future<E>);
  @override
  _i3.Stream<_i2.Socket> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]),
          returnValue: Stream<_i2.Socket>.empty()) as _i3.Stream<_i2.Socket>);
  @override
  _i3.Stream<_i2.Socket> takeWhile(bool Function(_i2.Socket)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
          returnValue: Stream<_i2.Socket>.empty()) as _i3.Stream<_i2.Socket>);
  @override
  _i3.Stream<_i2.Socket> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]),
          returnValue: Stream<_i2.Socket>.empty()) as _i3.Stream<_i2.Socket>);
  @override
  _i3.Stream<_i2.Socket> skipWhile(bool Function(_i2.Socket)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
          returnValue: Stream<_i2.Socket>.empty()) as _i3.Stream<_i2.Socket>);
  @override
  _i3.Stream<_i2.Socket> distinct(
          [bool Function(_i2.Socket, _i2.Socket)? equals]) =>
      (super.noSuchMethod(Invocation.method(#distinct, [equals]),
          returnValue: Stream<_i2.Socket>.empty()) as _i3.Stream<_i2.Socket>);
  @override
  _i3.Future<_i2.Socket> firstWhere(bool Function(_i2.Socket)? test,
          {_i2.Socket Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#firstWhere, [test], {#orElse: orElse}),
              returnValue: Future<_i2.Socket>.value(_FakeSocket_1()))
          as _i3.Future<_i2.Socket>);
  @override
  _i3.Future<_i2.Socket> lastWhere(bool Function(_i2.Socket)? test,
          {_i2.Socket Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#lastWhere, [test], {#orElse: orElse}),
              returnValue: Future<_i2.Socket>.value(_FakeSocket_1()))
          as _i3.Future<_i2.Socket>);
  @override
  _i3.Future<_i2.Socket> singleWhere(bool Function(_i2.Socket)? test,
          {_i2.Socket Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#singleWhere, [test], {#orElse: orElse}),
              returnValue: Future<_i2.Socket>.value(_FakeSocket_1()))
          as _i3.Future<_i2.Socket>);
  @override
  _i3.Future<_i2.Socket> elementAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#elementAt, [index]),
              returnValue: Future<_i2.Socket>.value(_FakeSocket_1()))
          as _i3.Future<_i2.Socket>);
  @override
  _i3.Stream<_i2.Socket> timeout(Duration? timeLimit,
          {void Function(_i3.EventSink<_i2.Socket>)? onTimeout}) =>
      (super.noSuchMethod(
          Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
          returnValue: Stream<_i2.Socket>.empty()) as _i3.Stream<_i2.Socket>);
}
