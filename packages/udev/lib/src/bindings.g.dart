// coverage:ignore-file
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// API for enumerating and introspecting local devices
class Libudev {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Libudev(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Libudev.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<udev> udev_unref(
    ffi.Pointer<udev> udev,
  ) {
    return _udev_unref(
      udev,
    );
  }

  late final _udev_unref_ptr =
      _lookup<ffi.NativeFunction<_c_udev_unref>>('udev_unref');
  late final _dart_udev_unref _udev_unref =
      _udev_unref_ptr.asFunction<_dart_udev_unref>();

  ffi.Pointer<udev> udev_new() {
    return _udev_new();
  }

  late final _udev_new_ptr =
      _lookup<ffi.NativeFunction<_c_udev_new>>('udev_new');
  late final _dart_udev_new _udev_new =
      _udev_new_ptr.asFunction<_dart_udev_new>();

  ffi.Pointer<udev_device> udev_device_unref(
    ffi.Pointer<udev_device> udev_device,
  ) {
    return _udev_device_unref(
      udev_device,
    );
  }

  late final _udev_device_unref_ptr =
      _lookup<ffi.NativeFunction<_c_udev_device_unref>>('udev_device_unref');
  late final _dart_udev_device_unref _udev_device_unref =
      _udev_device_unref_ptr.asFunction<_dart_udev_device_unref>();

  ffi.Pointer<udev_device> udev_device_new_from_syspath(
    ffi.Pointer<udev> udev,
    ffi.Pointer<ffi.Int8> syspath,
  ) {
    return _udev_device_new_from_syspath(
      udev,
      syspath,
    );
  }

  late final _udev_device_new_from_syspath_ptr =
      _lookup<ffi.NativeFunction<_c_udev_device_new_from_syspath>>(
          'udev_device_new_from_syspath');
  late final _dart_udev_device_new_from_syspath _udev_device_new_from_syspath =
      _udev_device_new_from_syspath_ptr
          .asFunction<_dart_udev_device_new_from_syspath>();

  ffi.Pointer<ffi.Int8> udev_device_get_property_value(
    ffi.Pointer<udev_device> udev_device,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _udev_device_get_property_value(
      udev_device,
      key,
    );
  }

  late final _udev_device_get_property_value_ptr =
      _lookup<ffi.NativeFunction<_c_udev_device_get_property_value>>(
          'udev_device_get_property_value');
  late final _dart_udev_device_get_property_value
      _udev_device_get_property_value = _udev_device_get_property_value_ptr
          .asFunction<_dart_udev_device_get_property_value>();
}

class udev extends ffi.Opaque {}

class udev_device extends ffi.Opaque {}

typedef _c_udev_unref = ffi.Pointer<udev> Function(
  ffi.Pointer<udev> udev,
);

typedef _dart_udev_unref = ffi.Pointer<udev> Function(
  ffi.Pointer<udev> udev,
);

typedef _c_udev_new = ffi.Pointer<udev> Function();

typedef _dart_udev_new = ffi.Pointer<udev> Function();

typedef _c_udev_device_unref = ffi.Pointer<udev_device> Function(
  ffi.Pointer<udev_device> udev_device,
);

typedef _dart_udev_device_unref = ffi.Pointer<udev_device> Function(
  ffi.Pointer<udev_device> udev_device,
);

typedef _c_udev_device_new_from_syspath = ffi.Pointer<udev_device> Function(
  ffi.Pointer<udev> udev,
  ffi.Pointer<ffi.Int8> syspath,
);

typedef _dart_udev_device_new_from_syspath = ffi.Pointer<udev_device> Function(
  ffi.Pointer<udev> udev,
  ffi.Pointer<ffi.Int8> syspath,
);

typedef _c_udev_device_get_property_value = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<udev_device> udev_device,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_udev_device_get_property_value = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<udev_device> udev_device,
  ffi.Pointer<ffi.Int8> key,
);
