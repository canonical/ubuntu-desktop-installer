// coverage:ignore-file
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Provides common functions for password quality checking.
class LibPwQuality {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibPwQuality(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibPwQuality.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<pwquality_settings> pwquality_default_settings() {
    return _pwquality_default_settings();
  }

  late final _pwquality_default_settings_ptr =
      _lookup<ffi.NativeFunction<_c_pwquality_default_settings>>(
          'pwquality_default_settings');
  late final _dart_pwquality_default_settings _pwquality_default_settings =
      _pwquality_default_settings_ptr
          .asFunction<_dart_pwquality_default_settings>();

  void pwquality_free_settings(
    ffi.Pointer<pwquality_settings> pwq,
  ) {
    return _pwquality_free_settings(
      pwq,
    );
  }

  late final _pwquality_free_settings_ptr =
      _lookup<ffi.NativeFunction<_c_pwquality_free_settings>>(
          'pwquality_free_settings');
  late final _dart_pwquality_free_settings _pwquality_free_settings =
      _pwquality_free_settings_ptr.asFunction<_dart_pwquality_free_settings>();

  int pwquality_read_config(
    ffi.Pointer<pwquality_settings> pwq,
    ffi.Pointer<ffi.Int8> cfgfile,
    ffi.Pointer<ffi.Pointer<ffi.Void>> auxerror,
  ) {
    return _pwquality_read_config(
      pwq,
      cfgfile,
      auxerror,
    );
  }

  late final _pwquality_read_config_ptr =
      _lookup<ffi.NativeFunction<_c_pwquality_read_config>>(
          'pwquality_read_config');
  late final _dart_pwquality_read_config _pwquality_read_config =
      _pwquality_read_config_ptr.asFunction<_dart_pwquality_read_config>();

  int pwquality_set_option(
    ffi.Pointer<pwquality_settings> pwq,
    ffi.Pointer<ffi.Int8> option,
  ) {
    return _pwquality_set_option(
      pwq,
      option,
    );
  }

  late final _pwquality_set_option_ptr =
      _lookup<ffi.NativeFunction<_c_pwquality_set_option>>(
          'pwquality_set_option');
  late final _dart_pwquality_set_option _pwquality_set_option =
      _pwquality_set_option_ptr.asFunction<_dart_pwquality_set_option>();

  int pwquality_set_int_value(
    ffi.Pointer<pwquality_settings> pwq,
    int setting,
    int value,
  ) {
    return _pwquality_set_int_value(
      pwq,
      setting,
      value,
    );
  }

  late final _pwquality_set_int_value_ptr =
      _lookup<ffi.NativeFunction<_c_pwquality_set_int_value>>(
          'pwquality_set_int_value');
  late final _dart_pwquality_set_int_value _pwquality_set_int_value =
      _pwquality_set_int_value_ptr.asFunction<_dart_pwquality_set_int_value>();

  int pwquality_set_str_value(
    ffi.Pointer<pwquality_settings> pwq,
    int setting,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _pwquality_set_str_value(
      pwq,
      setting,
      value,
    );
  }

  late final _pwquality_set_str_value_ptr =
      _lookup<ffi.NativeFunction<_c_pwquality_set_str_value>>(
          'pwquality_set_str_value');
  late final _dart_pwquality_set_str_value _pwquality_set_str_value =
      _pwquality_set_str_value_ptr.asFunction<_dart_pwquality_set_str_value>();

  int pwquality_get_int_value(
    ffi.Pointer<pwquality_settings> pwq,
    int setting,
    ffi.Pointer<ffi.Int32> value,
  ) {
    return _pwquality_get_int_value(
      pwq,
      setting,
      value,
    );
  }

  late final _pwquality_get_int_value_ptr =
      _lookup<ffi.NativeFunction<_c_pwquality_get_int_value>>(
          'pwquality_get_int_value');
  late final _dart_pwquality_get_int_value _pwquality_get_int_value =
      _pwquality_get_int_value_ptr.asFunction<_dart_pwquality_get_int_value>();

  int pwquality_get_str_value(
    ffi.Pointer<pwquality_settings> pwq,
    int setting,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  ) {
    return _pwquality_get_str_value(
      pwq,
      setting,
      value,
    );
  }

  late final _pwquality_get_str_value_ptr =
      _lookup<ffi.NativeFunction<_c_pwquality_get_str_value>>(
          'pwquality_get_str_value');
  late final _dart_pwquality_get_str_value _pwquality_get_str_value =
      _pwquality_get_str_value_ptr.asFunction<_dart_pwquality_get_str_value>();

  int pwquality_generate(
    ffi.Pointer<pwquality_settings> pwq,
    int entropy_bits,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> password,
  ) {
    return _pwquality_generate(
      pwq,
      entropy_bits,
      password,
    );
  }

  late final _pwquality_generate_ptr =
      _lookup<ffi.NativeFunction<_c_pwquality_generate>>('pwquality_generate');
  late final _dart_pwquality_generate _pwquality_generate =
      _pwquality_generate_ptr.asFunction<_dart_pwquality_generate>();

  int pwquality_check(
    ffi.Pointer<pwquality_settings> pwq,
    ffi.Pointer<ffi.Int8> password,
    ffi.Pointer<ffi.Int8> oldpassword,
    ffi.Pointer<ffi.Int8> user,
    ffi.Pointer<ffi.Pointer<ffi.Void>> auxerror,
  ) {
    return _pwquality_check(
      pwq,
      password,
      oldpassword,
      user,
      auxerror,
    );
  }

  late final _pwquality_check_ptr =
      _lookup<ffi.NativeFunction<_c_pwquality_check>>('pwquality_check');
  late final _dart_pwquality_check _pwquality_check =
      _pwquality_check_ptr.asFunction<_dart_pwquality_check>();

  ffi.Pointer<ffi.Int8> pwquality_strerror(
    ffi.Pointer<ffi.Int8> buf,
    int len,
    int errcode,
    ffi.Pointer<ffi.Void> auxerror,
  ) {
    return _pwquality_strerror(
      buf,
      len,
      errcode,
      auxerror,
    );
  }

  late final _pwquality_strerror_ptr =
      _lookup<ffi.NativeFunction<_c_pwquality_strerror>>('pwquality_strerror');
  late final _dart_pwquality_strerror _pwquality_strerror =
      _pwquality_strerror_ptr.asFunction<_dart_pwquality_strerror>();
}

class pwquality_settings extends ffi.Opaque {}

const int PWQ_SETTING_DIFF_OK = 1;

const int PWQ_SETTING_MIN_LENGTH = 3;

const int PWQ_SETTING_DIG_CREDIT = 4;

const int PWQ_SETTING_UP_CREDIT = 5;

const int PWQ_SETTING_LOW_CREDIT = 6;

const int PWQ_SETTING_OTH_CREDIT = 7;

const int PWQ_SETTING_MIN_CLASS = 8;

const int PWQ_SETTING_MAX_REPEAT = 9;

const int PWQ_SETTING_DICT_PATH = 10;

const int PWQ_SETTING_MAX_CLASS_REPEAT = 11;

const int PWQ_SETTING_GECOS_CHECK = 12;

const int PWQ_SETTING_BAD_WORDS = 13;

const int PWQ_SETTING_MAX_SEQUENCE = 14;

const int PWQ_SETTING_DICT_CHECK = 15;

const int PWQ_SETTING_USER_CHECK = 16;

const int PWQ_SETTING_ENFORCING = 17;

const int PWQ_SETTING_RETRY_TIMES = 18;

const int PWQ_SETTING_ENFORCE_ROOT = 19;

const int PWQ_SETTING_LOCAL_USERS = 20;

const int PWQ_SETTING_USER_SUBSTR = 21;

const int PWQ_MAX_ENTROPY_BITS = 256;

const int PWQ_MIN_ENTROPY_BITS = 56;

const int PWQ_MAX_ERROR_MESSAGE_LEN = 256;

const int PWQ_ERROR_SUCCESS = 0;

const int PWQ_ERROR_FATAL_FAILURE = -1;

const int PWQ_ERROR_INTEGER = -2;

const int PWQ_ERROR_CFGFILE_OPEN = -3;

const int PWQ_ERROR_CFGFILE_MALFORMED = -4;

const int PWQ_ERROR_UNKNOWN_SETTING = -5;

const int PWQ_ERROR_NON_INT_SETTING = -6;

const int PWQ_ERROR_NON_STR_SETTING = -7;

const int PWQ_ERROR_MEM_ALLOC = -8;

const int PWQ_ERROR_TOO_SIMILAR = -9;

const int PWQ_ERROR_MIN_DIGITS = -10;

const int PWQ_ERROR_MIN_UPPERS = -11;

const int PWQ_ERROR_MIN_LOWERS = -12;

const int PWQ_ERROR_MIN_OTHERS = -13;

const int PWQ_ERROR_MIN_LENGTH = -14;

const int PWQ_ERROR_PALINDROME = -15;

const int PWQ_ERROR_CASE_CHANGES_ONLY = -16;

const int PWQ_ERROR_ROTATED = -17;

const int PWQ_ERROR_MIN_CLASSES = -18;

const int PWQ_ERROR_MAX_CONSECUTIVE = -19;

const int PWQ_ERROR_EMPTY_PASSWORD = -20;

const int PWQ_ERROR_SAME_PASSWORD = -21;

const int PWQ_ERROR_CRACKLIB_CHECK = -22;

const int PWQ_ERROR_RNG = -23;

const int PWQ_ERROR_GENERATION_FAILED = -24;

const int PWQ_ERROR_USER_CHECK = -25;

const int PWQ_ERROR_GECOS_CHECK = -26;

const int PWQ_ERROR_MAX_CLASS_REPEAT = -27;

const int PWQ_ERROR_BAD_WORDS = -28;

const int PWQ_ERROR_MAX_SEQUENCE = -29;

typedef _c_pwquality_default_settings = ffi.Pointer<pwquality_settings>
    Function();

typedef _dart_pwquality_default_settings = ffi.Pointer<pwquality_settings>
    Function();

typedef _c_pwquality_free_settings = ffi.Void Function(
  ffi.Pointer<pwquality_settings> pwq,
);

typedef _dart_pwquality_free_settings = void Function(
  ffi.Pointer<pwquality_settings> pwq,
);

typedef _c_pwquality_read_config = ffi.Int32 Function(
  ffi.Pointer<pwquality_settings> pwq,
  ffi.Pointer<ffi.Int8> cfgfile,
  ffi.Pointer<ffi.Pointer<ffi.Void>> auxerror,
);

typedef _dart_pwquality_read_config = int Function(
  ffi.Pointer<pwquality_settings> pwq,
  ffi.Pointer<ffi.Int8> cfgfile,
  ffi.Pointer<ffi.Pointer<ffi.Void>> auxerror,
);

typedef _c_pwquality_set_option = ffi.Int32 Function(
  ffi.Pointer<pwquality_settings> pwq,
  ffi.Pointer<ffi.Int8> option,
);

typedef _dart_pwquality_set_option = int Function(
  ffi.Pointer<pwquality_settings> pwq,
  ffi.Pointer<ffi.Int8> option,
);

typedef _c_pwquality_set_int_value = ffi.Int32 Function(
  ffi.Pointer<pwquality_settings> pwq,
  ffi.Int32 setting,
  ffi.Int32 value,
);

typedef _dart_pwquality_set_int_value = int Function(
  ffi.Pointer<pwquality_settings> pwq,
  int setting,
  int value,
);

typedef _c_pwquality_set_str_value = ffi.Int32 Function(
  ffi.Pointer<pwquality_settings> pwq,
  ffi.Int32 setting,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_pwquality_set_str_value = int Function(
  ffi.Pointer<pwquality_settings> pwq,
  int setting,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_pwquality_get_int_value = ffi.Int32 Function(
  ffi.Pointer<pwquality_settings> pwq,
  ffi.Int32 setting,
  ffi.Pointer<ffi.Int32> value,
);

typedef _dart_pwquality_get_int_value = int Function(
  ffi.Pointer<pwquality_settings> pwq,
  int setting,
  ffi.Pointer<ffi.Int32> value,
);

typedef _c_pwquality_get_str_value = ffi.Int32 Function(
  ffi.Pointer<pwquality_settings> pwq,
  ffi.Int32 setting,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _dart_pwquality_get_str_value = int Function(
  ffi.Pointer<pwquality_settings> pwq,
  int setting,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _c_pwquality_generate = ffi.Int32 Function(
  ffi.Pointer<pwquality_settings> pwq,
  ffi.Int32 entropy_bits,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> password,
);

typedef _dart_pwquality_generate = int Function(
  ffi.Pointer<pwquality_settings> pwq,
  int entropy_bits,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> password,
);

typedef _c_pwquality_check = ffi.Int32 Function(
  ffi.Pointer<pwquality_settings> pwq,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> oldpassword,
  ffi.Pointer<ffi.Int8> user,
  ffi.Pointer<ffi.Pointer<ffi.Void>> auxerror,
);

typedef _dart_pwquality_check = int Function(
  ffi.Pointer<pwquality_settings> pwq,
  ffi.Pointer<ffi.Int8> password,
  ffi.Pointer<ffi.Int8> oldpassword,
  ffi.Pointer<ffi.Int8> user,
  ffi.Pointer<ffi.Pointer<ffi.Void>> auxerror,
);

typedef _c_pwquality_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint64 len,
  ffi.Int32 errcode,
  ffi.Pointer<ffi.Void> auxerror,
);

typedef _dart_pwquality_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> buf,
  int len,
  int errcode,
  ffi.Pointer<ffi.Void> auxerror,
);
