// Mocks generated by Mockito 5.4.2 from annotations
// in ubuntu_provision/test/network/test_network.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ubuntu_provision/services.dart' as _i2;
import 'package:ubuntu_provision/src/network/connect_model.dart' as _i5;
import 'package:ubuntu_provision/src/network/ethernet_model.dart' as _i3;
import 'package:ubuntu_provision/src/network/hidden_wifi_model.dart' as _i9;
import 'package:ubuntu_provision/src/network/network_model.dart' as _i8;
import 'package:ubuntu_provision/src/network/wifi_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNetworkManagerDevice_0 extends _i1.SmartFake
    implements _i2.NetworkManagerDevice {
  _FakeNetworkManagerDevice_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkService_1 extends _i1.SmartFake
    implements _i2.NetworkService {
  _FakeNetworkService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEthernetDevice_2 extends _i1.SmartFake
    implements _i3.EthernetDevice {
  _FakeEthernetDevice_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWifiDevice_3 extends _i1.SmartFake implements _i4.WifiDevice {
  _FakeWifiDevice_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkManagerAccessPoint_4 extends _i1.SmartFake
    implements _i2.NetworkManagerAccessPoint {
  _FakeNetworkManagerAccessPoint_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConnectModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectModel extends _i1.Mock implements _i5.ConnectModel {
  MockConnectModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get canConnect => (super.noSuchMethod(
        Invocation.getter(#canConnect),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnecting => (super.noSuchMethod(
        Invocation.getter(#isConnecting),
        returnValue: false,
      ) as bool);
  @override
  bool get hasActiveConnection => (super.noSuchMethod(
        Invocation.getter(#hasActiveConnection),
        returnValue: false,
      ) as bool);
  @override
  bool get isEnabled => (super.noSuchMethod(
        Invocation.getter(#isEnabled),
        returnValue: false,
      ) as bool);
  @override
  _i6.Stream<dynamic> get onAvailabilityChanged => (super.noSuchMethod(
        Invocation.getter(#onAvailabilityChanged),
        returnValue: _i6.Stream<dynamic>.empty(),
      ) as _i6.Stream<dynamic>);
  @override
  _i5.ConnectMode get connectMode => (super.noSuchMethod(
        Invocation.getter(#connectMode),
        returnValue: _i5.ConnectMode.none,
      ) as _i5.ConnectMode);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);
  @override
  void onSelected() => super.noSuchMethod(
        Invocation.method(
          #onSelected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onDeselected() => super.noSuchMethod(
        Invocation.method(
          #onDeselected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> cleanup() => (super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> enable() => (super.noSuchMethod(
        Invocation.method(
          #enable,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NetworkModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkModel extends _i1.Mock implements _i8.NetworkModel {
  MockNetworkModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get canConnect => (super.noSuchMethod(
        Invocation.getter(#canConnect),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  bool get hasActiveConnection => (super.noSuchMethod(
        Invocation.getter(#hasActiveConnection),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnecting => (super.noSuchMethod(
        Invocation.getter(#isConnecting),
        returnValue: false,
      ) as bool);
  @override
  bool get isEnabled => (super.noSuchMethod(
        Invocation.getter(#isEnabled),
        returnValue: false,
      ) as bool);
  @override
  _i6.Stream<dynamic> get onAvailabilityChanged => (super.noSuchMethod(
        Invocation.getter(#onAvailabilityChanged),
        returnValue: _i6.Stream<dynamic>.empty(),
      ) as _i6.Stream<dynamic>);
  @override
  _i5.ConnectMode get connectMode => (super.noSuchMethod(
        Invocation.getter(#connectMode),
        returnValue: _i5.ConnectMode.none,
      ) as _i5.ConnectMode);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);
  @override
  void addConnectMode(_i5.ConnectModel? model) => super.noSuchMethod(
        Invocation.method(
          #addConnectMode,
          [model],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void selectConnectMode([_i5.ConnectMode? mode]) => super.noSuchMethod(
        Invocation.method(
          #selectConnectMode,
          [mode],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onSelected() => super.noSuchMethod(
        Invocation.method(
          #onSelected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onDeselected() => super.noSuchMethod(
        Invocation.method(
          #onDeselected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> markConfigured() => (super.noSuchMethod(
        Invocation.method(
          #markConfigured,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> cleanup() => (super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> enable() => (super.noSuchMethod(
        Invocation.method(
          #enable,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [EthernetDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockEthernetDevice extends _i1.Mock implements _i3.EthernetDevice {
  MockEthernetDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NetworkManagerDevice get device => (super.noSuchMethod(
        Invocation.getter(#device),
        returnValue: _FakeNetworkManagerDevice_0(
          this,
          Invocation.getter(#device),
        ),
      ) as _i2.NetworkManagerDevice);
  @override
  String get interface => (super.noSuchMethod(
        Invocation.getter(#interface),
        returnValue: '',
      ) as String);
  @override
  _i2.NetworkManagerDeviceState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i2.NetworkManagerDeviceState.unknown,
      ) as _i2.NetworkManagerDeviceState);
  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnecting => (super.noSuchMethod(
        Invocation.getter(#isConnecting),
        returnValue: false,
      ) as bool);
  @override
  bool get isAvailable => (super.noSuchMethod(
        Invocation.getter(#isAvailable),
        returnValue: false,
      ) as bool);
  @override
  bool get isDisconnected => (super.noSuchMethod(
        Invocation.getter(#isDisconnected),
        returnValue: false,
      ) as bool);
  @override
  bool get isUnmanaged => (super.noSuchMethod(
        Invocation.getter(#isUnmanaged),
        returnValue: false,
      ) as bool);
  @override
  String get hwAddress => (super.noSuchMethod(
        Invocation.getter(#hwAddress),
        returnValue: '',
      ) as String);
  @override
  List<_i2.NetworkManagerSettingsConnection> get availableConnections =>
      (super.noSuchMethod(
        Invocation.getter(#availableConnections),
        returnValue: <_i2.NetworkManagerSettingsConnection>[],
      ) as List<_i2.NetworkManagerSettingsConnection>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);
  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void cleanup() => super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateDevice(_i2.NetworkManagerDevice? device) => super.noSuchMethod(
        Invocation.method(
          #updateDevice,
          [device],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setProperties(_i6.Stream<List<String>>? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #setProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addPropertyListener(
    String? property,
    _i7.VoidCallback? onChanged,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addPropertyListener,
          [
            property,
            onChanged,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void enablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #enablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void disablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #disablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [EthernetModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockEthernetModel extends _i1.Mock implements _i3.EthernetModel {
  MockEthernetModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get canConnect => (super.noSuchMethod(
        Invocation.getter(#canConnect),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnecting => (super.noSuchMethod(
        Invocation.getter(#isConnecting),
        returnValue: false,
      ) as bool);
  @override
  bool get hasActiveConnection => (super.noSuchMethod(
        Invocation.getter(#hasActiveConnection),
        returnValue: false,
      ) as bool);
  @override
  bool get isEnabled => (super.noSuchMethod(
        Invocation.getter(#isEnabled),
        returnValue: false,
      ) as bool);
  @override
  _i5.ConnectMode get connectMode => (super.noSuchMethod(
        Invocation.getter(#connectMode),
        returnValue: _i5.ConnectMode.none,
      ) as _i5.ConnectMode);
  @override
  _i2.NetworkService get service => (super.noSuchMethod(
        Invocation.getter(#service),
        returnValue: _FakeNetworkService_1(
          this,
          Invocation.getter(#service),
        ),
      ) as _i2.NetworkService);
  @override
  List<_i3.EthernetDevice> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i3.EthernetDevice>[],
      ) as List<_i3.EthernetDevice>);
  @override
  _i6.Stream<dynamic> get onAvailabilityChanged => (super.noSuchMethod(
        Invocation.getter(#onAvailabilityChanged),
        returnValue: _i6.Stream<dynamic>.empty(),
      ) as _i6.Stream<dynamic>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);
  @override
  void onSelected() => super.noSuchMethod(
        Invocation.method(
          #onSelected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onDeselected() => super.noSuchMethod(
        Invocation.method(
          #onDeselected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> enable() => (super.noSuchMethod(
        Invocation.method(
          #enable,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  List<_i2.NetworkManagerDevice> getDevices() => (super.noSuchMethod(
        Invocation.method(
          #getDevices,
          [],
        ),
        returnValue: <_i2.NetworkManagerDevice>[],
      ) as List<_i2.NetworkManagerDevice>);
  @override
  _i3.EthernetDevice createDevice(_i2.NetworkManagerDevice? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDevice,
          [device],
        ),
        returnValue: _FakeEthernetDevice_2(
          this,
          Invocation.method(
            #createDevice,
            [device],
          ),
        ),
      ) as _i3.EthernetDevice);
  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> cleanup() => (super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateDevices() => super.noSuchMethod(
        Invocation.method(
          #updateDevices,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isSelectedDevice(_i3.EthernetDevice? device) => (super.noSuchMethod(
        Invocation.method(
          #isSelectedDevice,
          [device],
        ),
        returnValue: false,
      ) as bool);
  @override
  void selectDevice(_i3.EthernetDevice? device) => super.noSuchMethod(
        Invocation.method(
          #selectDevice,
          [device],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setProperties(_i6.Stream<List<String>>? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #setProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addPropertyListener(
    String? property,
    _i7.VoidCallback? onChanged,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addPropertyListener,
          [
            property,
            onChanged,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void enablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #enablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void disablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #disablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HiddenWifiModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiddenWifiModel extends _i1.Mock implements _i9.HiddenWifiModel {
  MockHiddenWifiModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get canConnect => (super.noSuchMethod(
        Invocation.getter(#canConnect),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  bool get hasActiveConnection => (super.noSuchMethod(
        Invocation.getter(#hasActiveConnection),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnecting => (super.noSuchMethod(
        Invocation.getter(#isConnecting),
        returnValue: false,
      ) as bool);
  @override
  bool get isEnabled => (super.noSuchMethod(
        Invocation.getter(#isEnabled),
        returnValue: false,
      ) as bool);
  @override
  _i5.ConnectMode get connectMode => (super.noSuchMethod(
        Invocation.getter(#connectMode),
        returnValue: _i5.ConnectMode.none,
      ) as _i5.ConnectMode);
  @override
  String get ssid => (super.noSuchMethod(
        Invocation.getter(#ssid),
        returnValue: '',
      ) as String);
  @override
  _i2.NetworkService get service => (super.noSuchMethod(
        Invocation.getter(#service),
        returnValue: _FakeNetworkService_1(
          this,
          Invocation.getter(#service),
        ),
      ) as _i2.NetworkService);
  @override
  List<_i4.WifiDevice> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i4.WifiDevice>[],
      ) as List<_i4.WifiDevice>);
  @override
  _i6.Stream<dynamic> get onAvailabilityChanged => (super.noSuchMethod(
        Invocation.getter(#onAvailabilityChanged),
        returnValue: _i6.Stream<dynamic>.empty(),
      ) as _i6.Stream<dynamic>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);
  @override
  _i6.Future<dynamic> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  void setSsid(String? ssid) => super.noSuchMethod(
        Invocation.method(
          #setSsid,
          [ssid],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> enable() => (super.noSuchMethod(
        Invocation.method(
          #enable,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void onDeselected() => super.noSuchMethod(
        Invocation.method(
          #onDeselected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onSelected() => super.noSuchMethod(
        Invocation.method(
          #onSelected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i2.NetworkManagerDevice> getDevices() => (super.noSuchMethod(
        Invocation.method(
          #getDevices,
          [],
        ),
        returnValue: <_i2.NetworkManagerDevice>[],
      ) as List<_i2.NetworkManagerDevice>);
  @override
  _i4.WifiDevice createDevice(_i2.NetworkManagerDevice? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDevice,
          [device],
        ),
        returnValue: _FakeWifiDevice_3(
          this,
          Invocation.method(
            #createDevice,
            [device],
          ),
        ),
      ) as _i4.WifiDevice);
  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> cleanup() => (super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateDevices() => super.noSuchMethod(
        Invocation.method(
          #updateDevices,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isSelectedDevice(_i4.WifiDevice? device) => (super.noSuchMethod(
        Invocation.method(
          #isSelectedDevice,
          [device],
        ),
        returnValue: false,
      ) as bool);
  @override
  void selectDevice(_i4.WifiDevice? device) => super.noSuchMethod(
        Invocation.method(
          #selectDevice,
          [device],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setProperties(_i6.Stream<List<String>>? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #setProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addPropertyListener(
    String? property,
    _i7.VoidCallback? onChanged,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addPropertyListener,
          [
            property,
            onChanged,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void enablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #enablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void disablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #disablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AccessPoint].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccessPoint extends _i1.Mock implements _i4.AccessPoint {
  MockAccessPoint() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NetworkManagerAccessPoint get accessPoint => (super.noSuchMethod(
        Invocation.getter(#accessPoint),
        returnValue: _FakeNetworkManagerAccessPoint_4(
          this,
          Invocation.getter(#accessPoint),
        ),
      ) as _i2.NetworkManagerAccessPoint);
  @override
  List<int> get ssid => (super.noSuchMethod(
        Invocation.getter(#ssid),
        returnValue: <int>[],
      ) as List<int>);
  @override
  String get hwAddress => (super.noSuchMethod(
        Invocation.getter(#hwAddress),
        returnValue: '',
      ) as String);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
      ) as String);
  @override
  int get strength => (super.noSuchMethod(
        Invocation.getter(#strength),
        returnValue: 0,
      ) as int);
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);
  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void cleanup() => super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setProperties(_i6.Stream<List<String>>? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #setProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addPropertyListener(
    String? property,
    _i7.VoidCallback? onChanged,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addPropertyListener,
          [
            property,
            onChanged,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void enablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #enablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void disablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #disablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WifiDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockWifiDevice extends _i1.Mock implements _i4.WifiDevice {
  MockWifiDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
      ) as bool);
  @override
  List<_i4.AccessPoint> get accessPoints => (super.noSuchMethod(
        Invocation.getter(#accessPoints),
        returnValue: <_i4.AccessPoint>[],
      ) as List<_i4.AccessPoint>);
  @override
  bool get scanning => (super.noSuchMethod(
        Invocation.getter(#scanning),
        returnValue: false,
      ) as bool);
  @override
  int get lastScan => (super.noSuchMethod(
        Invocation.getter(#lastScan),
        returnValue: 0,
      ) as int);
  @override
  _i2.NetworkManagerDevice get device => (super.noSuchMethod(
        Invocation.getter(#device),
        returnValue: _FakeNetworkManagerDevice_0(
          this,
          Invocation.getter(#device),
        ),
      ) as _i2.NetworkManagerDevice);
  @override
  String get interface => (super.noSuchMethod(
        Invocation.getter(#interface),
        returnValue: '',
      ) as String);
  @override
  _i2.NetworkManagerDeviceState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i2.NetworkManagerDeviceState.unknown,
      ) as _i2.NetworkManagerDeviceState);
  @override
  bool get isConnecting => (super.noSuchMethod(
        Invocation.getter(#isConnecting),
        returnValue: false,
      ) as bool);
  @override
  bool get isAvailable => (super.noSuchMethod(
        Invocation.getter(#isAvailable),
        returnValue: false,
      ) as bool);
  @override
  bool get isDisconnected => (super.noSuchMethod(
        Invocation.getter(#isDisconnected),
        returnValue: false,
      ) as bool);
  @override
  bool get isUnmanaged => (super.noSuchMethod(
        Invocation.getter(#isUnmanaged),
        returnValue: false,
      ) as bool);
  @override
  String get hwAddress => (super.noSuchMethod(
        Invocation.getter(#hwAddress),
        returnValue: '',
      ) as String);
  @override
  List<_i2.NetworkManagerSettingsConnection> get availableConnections =>
      (super.noSuchMethod(
        Invocation.getter(#availableConnections),
        returnValue: <_i2.NetworkManagerSettingsConnection>[],
      ) as List<_i2.NetworkManagerSettingsConnection>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);
  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void cleanup() => super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateDevice(_i2.NetworkManagerDevice? device) => super.noSuchMethod(
        Invocation.method(
          #updateDevice,
          [device],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isActiveAccessPoint(_i4.AccessPoint? accessPoint) => (super.noSuchMethod(
        Invocation.method(
          #isActiveAccessPoint,
          [accessPoint],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool isSelectedAccessPoint(_i4.AccessPoint? accessPoint) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSelectedAccessPoint,
          [accessPoint],
        ),
        returnValue: false,
      ) as bool);
  @override
  void selectAccessPoint(_i4.AccessPoint? accessPoint) => super.noSuchMethod(
        Invocation.method(
          #selectAccessPoint,
          [accessPoint],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> requestScan({String? ssid}) => (super.noSuchMethod(
        Invocation.method(
          #requestScan,
          [],
          {#ssid: ssid},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i4.AccessPoint? findAccessPoint(String? ssid) =>
      (super.noSuchMethod(Invocation.method(
        #findAccessPoint,
        [ssid],
      )) as _i4.AccessPoint?);
  @override
  _i6.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setProperties(_i6.Stream<List<String>>? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #setProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addPropertyListener(
    String? property,
    _i7.VoidCallback? onChanged,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addPropertyListener,
          [
            property,
            onChanged,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void enablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #enablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void disablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #disablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WifiModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockWifiModel extends _i1.Mock implements _i4.WifiModel {
  MockWifiModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get canConnect => (super.noSuchMethod(
        Invocation.getter(#canConnect),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  bool get hasActiveConnection => (super.noSuchMethod(
        Invocation.getter(#hasActiveConnection),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnecting => (super.noSuchMethod(
        Invocation.getter(#isConnecting),
        returnValue: false,
      ) as bool);
  @override
  bool get isEnabled => (super.noSuchMethod(
        Invocation.getter(#isEnabled),
        returnValue: false,
      ) as bool);
  @override
  _i5.ConnectMode get connectMode => (super.noSuchMethod(
        Invocation.getter(#connectMode),
        returnValue: _i5.ConnectMode.none,
      ) as _i5.ConnectMode);
  @override
  _i2.NetworkService get service => (super.noSuchMethod(
        Invocation.getter(#service),
        returnValue: _FakeNetworkService_1(
          this,
          Invocation.getter(#service),
        ),
      ) as _i2.NetworkService);
  @override
  List<_i4.WifiDevice> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i4.WifiDevice>[],
      ) as List<_i4.WifiDevice>);
  @override
  _i6.Stream<dynamic> get onAvailabilityChanged => (super.noSuchMethod(
        Invocation.getter(#onAvailabilityChanged),
        returnValue: _i6.Stream<dynamic>.empty(),
      ) as _i6.Stream<dynamic>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);
  @override
  void onSelected() => super.noSuchMethod(
        Invocation.method(
          #onSelected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onDeselected() => super.noSuchMethod(
        Invocation.method(
          #onDeselected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> cleanup() => (super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> enable() => (super.noSuchMethod(
        Invocation.method(
          #enable,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  List<_i2.NetworkManagerDevice> getDevices() => (super.noSuchMethod(
        Invocation.method(
          #getDevices,
          [],
        ),
        returnValue: <_i2.NetworkManagerDevice>[],
      ) as List<_i2.NetworkManagerDevice>);
  @override
  _i4.WifiDevice createDevice(_i2.NetworkManagerDevice? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDevice,
          [device],
        ),
        returnValue: _FakeWifiDevice_3(
          this,
          Invocation.method(
            #createDevice,
            [device],
          ),
        ),
      ) as _i4.WifiDevice);
  @override
  void startPeriodicScanning() => super.noSuchMethod(
        Invocation.method(
          #startPeriodicScanning,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void stopPeriodicScanning() => super.noSuchMethod(
        Invocation.method(
          #stopPeriodicScanning,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<dynamic> requestScan({String? ssid}) => (super.noSuchMethod(
        Invocation.method(
          #requestScan,
          [],
          {#ssid: ssid},
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  void updateDevices() => super.noSuchMethod(
        Invocation.method(
          #updateDevices,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isSelectedDevice(_i4.WifiDevice? device) => (super.noSuchMethod(
        Invocation.method(
          #isSelectedDevice,
          [device],
        ),
        returnValue: false,
      ) as bool);
  @override
  void selectDevice(_i4.WifiDevice? device) => super.noSuchMethod(
        Invocation.method(
          #selectDevice,
          [device],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setProperties(_i6.Stream<List<String>>? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #setProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addPropertyListener(
    String? property,
    _i7.VoidCallback? onChanged,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addPropertyListener,
          [
            property,
            onChanged,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void enablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #enablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void disablePropertyListeners() => super.noSuchMethod(
        Invocation.method(
          #disablePropertyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
