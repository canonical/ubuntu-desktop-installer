// Mocks generated by Mockito 5.0.14 from annotations
// in ubuntu_wizard/test/wizard_app_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:convert' as _i2;
import 'dart:io' as _i4;

import 'package:http/http.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:subiquity_client/src/types.dart' as _i3;
import 'package:subiquity_client/subiquity_client.dart' as _i6;
import 'package:subiquity_client/subiquity_server.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEncoding_0 extends _i1.Fake implements _i2.Encoding {}

class _FakeKeyboardSetup_1 extends _i1.Fake implements _i3.KeyboardSetup {}

class _FakeIdentityData_2 extends _i1.Fake implements _i3.IdentityData {}

class _FakeTimezoneData_3 extends _i1.Fake implements _i3.TimezoneData {}

class _FakeSSHData_4 extends _i1.Fake implements _i3.SSHData {}

class _FakeApplicationStatus_5 extends _i1.Fake
    implements _i3.ApplicationStatus {}

class _FakeGuidedStorageResponse_6 extends _i1.Fake
    implements _i3.GuidedStorageResponse {}

class _FakeStorageResponse_7 extends _i1.Fake implements _i3.StorageResponse {}

/// A class which mocks [IOSink].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOSink extends _i1.Mock implements _i4.IOSink {
  MockIOSink() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Encoding get encoding => (super.noSuchMethod(Invocation.getter(#encoding),
      returnValue: _FakeEncoding_0()) as _i2.Encoding);
  @override
  set encoding(_i2.Encoding? _encoding) =>
      super.noSuchMethod(Invocation.setter(#encoding, _encoding),
          returnValueForMissingStub: null);
  @override
  _i5.Future<dynamic> get done => (super.noSuchMethod(Invocation.getter(#done),
      returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  void add(List<int>? data) =>
      super.noSuchMethod(Invocation.method(#add, [data]),
          returnValueForMissingStub: null);
  @override
  void write(Object? object) =>
      super.noSuchMethod(Invocation.method(#write, [object]),
          returnValueForMissingStub: null);
  @override
  void writeAll(Iterable<dynamic>? objects, [String? separator = r'']) =>
      super.noSuchMethod(Invocation.method(#writeAll, [objects, separator]),
          returnValueForMissingStub: null);
  @override
  void writeln([Object? object = r'']) =>
      super.noSuchMethod(Invocation.method(#writeln, [object]),
          returnValueForMissingStub: null);
  @override
  void writeCharCode(int? charCode) =>
      super.noSuchMethod(Invocation.method(#writeCharCode, [charCode]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<dynamic> addStream(_i5.Stream<List<int>>? stream) =>
      (super.noSuchMethod(Invocation.method(#addStream, [stream]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> flush() =>
      (super.noSuchMethod(Invocation.method(#flush, []),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SubiquityClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubiquityClient extends _i1.Mock implements _i6.SubiquityClient {
  MockSubiquityClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void open(String? socketPath) =>
      super.noSuchMethod(Invocation.method(#open, [socketPath]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> checkStatus(
          String? method, _i7.StreamedResponse? response) =>
      (super.noSuchMethod(Invocation.method(#checkStatus, [method, response]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<String> locale() =>
      (super.noSuchMethod(Invocation.method(#locale, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<void> setLocale(String? locale) =>
      (super.noSuchMethod(Invocation.method(#setLocale, [locale]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.KeyboardSetup> keyboard() => (super.noSuchMethod(
          Invocation.method(#keyboard, []),
          returnValue: Future<_i3.KeyboardSetup>.value(_FakeKeyboardSetup_1()))
      as _i5.Future<_i3.KeyboardSetup>);
  @override
  _i5.Future<void> setKeyboard(_i3.KeyboardSetting? setting) =>
      (super.noSuchMethod(Invocation.method(#setKeyboard, [setting]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<String> proxy() =>
      (super.noSuchMethod(Invocation.method(#proxy, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<void> setProxy(String? proxy) =>
      (super.noSuchMethod(Invocation.method(#setProxy, [proxy]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<String> mirror() =>
      (super.noSuchMethod(Invocation.method(#mirror, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<void> setMirror(String? mirror) =>
      (super.noSuchMethod(Invocation.method(#setMirror, [mirror]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.IdentityData> identity() => (super.noSuchMethod(
          Invocation.method(#identity, []),
          returnValue: Future<_i3.IdentityData>.value(_FakeIdentityData_2()))
      as _i5.Future<_i3.IdentityData>);
  @override
  _i5.Future<void> setIdentity(_i3.IdentityData? identity) =>
      (super.noSuchMethod(Invocation.method(#setIdentity, [identity]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.TimezoneData> timezone() => (super.noSuchMethod(
          Invocation.method(#timezone, []),
          returnValue: Future<_i3.TimezoneData>.value(_FakeTimezoneData_3()))
      as _i5.Future<_i3.TimezoneData>);
  @override
  _i5.Future<void> setTimezone(String? timezone) =>
      (super.noSuchMethod(Invocation.method(#setTimezone, [timezone]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.SSHData> ssh() =>
      (super.noSuchMethod(Invocation.method(#ssh, []),
              returnValue: Future<_i3.SSHData>.value(_FakeSSHData_4()))
          as _i5.Future<_i3.SSHData>);
  @override
  _i5.Future<void> setSsh(_i3.SSHData? ssh) =>
      (super.noSuchMethod(Invocation.method(#setSsh, [ssh]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.ApplicationStatus> status({_i3.ApplicationState? current}) =>
      (super.noSuchMethod(Invocation.method(#status, [], {#current: current}),
              returnValue: Future<_i3.ApplicationStatus>.value(
                  _FakeApplicationStatus_5()))
          as _i5.Future<_i3.ApplicationStatus>);
  @override
  _i5.Future<void> markConfigured(List<String>? endpointNames) =>
      (super.noSuchMethod(Invocation.method(#markConfigured, [endpointNames]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> confirm(String? tty) =>
      (super.noSuchMethod(Invocation.method(#confirm, [tty]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<bool> hasRst() =>
      (super.noSuchMethod(Invocation.method(#hasRst, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> hasBitLocker() =>
      (super.noSuchMethod(Invocation.method(#hasBitLocker, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i3.GuidedStorageResponse> getGuidedStorage(
          int? minSize, bool? wait) =>
      (super.noSuchMethod(Invocation.method(#getGuidedStorage, [minSize, wait]),
              returnValue: Future<_i3.GuidedStorageResponse>.value(
                  _FakeGuidedStorageResponse_6()))
          as _i5.Future<_i3.GuidedStorageResponse>);
  @override
  _i5.Future<_i3.StorageResponse> setGuidedStorage(_i3.GuidedChoice? choice) =>
      (super.noSuchMethod(Invocation.method(#setGuidedStorage, [choice]),
              returnValue:
                  Future<_i3.StorageResponse>.value(_FakeStorageResponse_7()))
          as _i5.Future<_i3.StorageResponse>);
  @override
  _i5.Future<void> setStorage(List<dynamic>? config) =>
      (super.noSuchMethod(Invocation.method(#setStorage, [config]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> reboot() =>
      (super.noSuchMethod(Invocation.method(#reboot, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SubiquityServer].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubiquityServer extends _i1.Mock implements _i8.SubiquityServer {
  MockSubiquityServer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> start(_i8.ServerMode? serverMode, List<String>? args) =>
      (super.noSuchMethod(Invocation.method(#start, [serverMode, args]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<void> stop() => (super.noSuchMethod(Invocation.method(#stop, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  String toString() => super.toString();
}
