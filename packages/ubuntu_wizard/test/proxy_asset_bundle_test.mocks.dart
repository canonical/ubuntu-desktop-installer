// Mocks generated by Mockito 5.0.14 from annotations
// in ubuntu_wizard/test/proxy_asset_bundle_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:typed_data' as _i2;

import 'package:flutter/src/services/asset_bundle.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

import 'proxy_asset_bundle_test.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeByteData_0 extends _i1.Fake implements _i2.ByteData {}

/// A class which mocks [AssetBundle].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetBundle extends _i1.Mock implements _i3.AssetBundle {
  MockAssetBundle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ByteData> load(String? key) =>
      (super.noSuchMethod(Invocation.method(#load, [key]),
              returnValue: Future<_i2.ByteData>.value(_FakeByteData_0()))
          as _i4.Future<_i2.ByteData>);
  @override
  _i4.Future<String> loadString(String? key, {bool? cache = true}) => (super
      .noSuchMethod(Invocation.method(#loadString, [key], {#cache: cache}),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<T> loadStructuredData<T>(
          String? key, _i4.Future<T> Function(String)? parser) =>
      (super.noSuchMethod(Invocation.method(#loadStructuredData, [key, parser]),
          returnValue: _i5.loadMockData<T>(key, parser)) as _i4.Future<T>);
  @override
  void evict(String? key) =>
      super.noSuchMethod(Invocation.method(#evict, [key]),
          returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
